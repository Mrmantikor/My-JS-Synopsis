//#region //? Масиви (Array)
/* //! Масив (Array) - Основи
TODO: Масив — це спеціальна змінна, яка дозволяє зберігати кілька значень у впорядкованому списку.
 * - Містить елементи (числа, рядки тощо), доступні за їхніми індексами, що починаються з 0.
 * - Довжина масиву (length) показує кількість елементів; останній індекс = length - 1.
 * - Можна змінювати окремі елементи через індекс або повністю перезаписати масив новим набором значень.
 * - Корисно для зберігання списків даних, наприклад, імен, чисел чи продуктів.

TODO: Синтаксис:
let array = [елемент1, елемент2, елемент3]; // Створення масиву
array[індекс] = нове_значення; // Зміна елемента
array = [новий_елемент1, новий_елемент2]; // Повний перезапис

TODO: Приклад 1. Створення масиву та доступ до елементів
let colors = ['red', 'blue', 'green'];
console.log(colors[0]); // Виводить: 'red' (перший елемент)
console.log(colors[colors.length - 1]); // Виводить: 'green' (останній елемент)

TODO: Приклад 2. Зміна одного елемента
let animals = ['cat', 'dog', 'bird'];
animals[1] = 'fish';
console.log(animals); // Виводить: ['cat', 'fish', 'bird']

TODO: Приклад 3. Повний перезапис масиву
let numbers = [1, 2, 3];
numbers = [4, 5];
console.log(numbers); // Виводить: [4, 5]
*/
/* //! Array-like Object (Псевдомасив)
TODO: Об’єкт, який схожий на масив завдяки числовим індексам і властивості length, але не має методів масиву.
 * - Має індекси (0, 1, 2...) і властивість length, як у масиву, але це об’єкт.
 * - Не підтримує методи масиву (push, map тощо), тому потрібне перетворення в масив.
 * - Зустрічається в arguments функцій чи DOM-колекціях (NodeList).
 * - Можна перетворити в справжній масив за допомогою Array.from або спред-оператора (...).

TODO: Синтаксис:
  Доступ до псевдомасиву
псевдомасив[індекс];
  Перетворення в масив
let realArray = Array.from(псевдомасив);

TODO: Приклад 1. Псевдомасив arguments у функції
function listItems() {
  console.log(arguments[0]); // Виводить: 'book'
  console.log(arguments.length); // Виводить: 3
}
listItems('book', 'pen', 'notebook');

TODO: Приклад 2. Перетворення arguments у масив
function makeArray() {
  let realArray = Array.from(arguments);
  console.log(realArray); // Виводить: ['milk', 'bread']
}
makeArray('milk', 'bread');

TODO: Приклад 3. Робота з NodeList (з DOM)
let buttons = document.querySelectorAll('button');
console.log(buttons[0]); // Виводить: перший button (якщо є)
console.log(buttons.length); // Виводить: кількість кнопок
*/
/* //! arguments (Об’єкт аргументів функції як псевдомасив)
TODO: Псевдомасив, який виглядає як масив, але є об’єктом, що містить аргументи функції.
 * - Має числові індекси (0, 1, 2...) і властивість length, як у масивів.
 * - Не є справжнім масивом, тому методи типу push, map чи slice недоступні без перетворення.
 * - З’являється автоматично всередині функцій (крім стрілочних) і зберігає передані аргументи.
 * - Корисно знати для роботи з масивоподібними структурами та їх перетворення в масиви.
 * - Перетворюється в масив через Array.from() або спред-оператор (...arguments).

TODO: Синтаксис:
arguments[індекс]; // Доступ до елемента
let realArray = Array.from(arguments); // Перетворення в масив

TODO: Приклад 1. Доступ до елементів як у масиві
function checkArgs() {
  console.log(arguments[0]); // Виводить: 'apple'
  console.log(arguments.length); // Виводить: 2
}
checkArgs('apple', 'banana');

TODO: Приклад 2. Перетворення в масив для методів
function doubleArgs() {
  let argsArray = Array.from(arguments);
  console.log(argsArray.map(x => x * 2)); // Виводить: [2, 4, 6]
}
doubleArgs(1, 2, 3);

TODO: Приклад 3. Порівняння зі справжнім масивом
function compare() {
  let realArray = ['cat', 'dog'];
  console.log(realArray[1]); // Виводить: 'dog' (як у arguments)
  console.log(arguments[1]); // Виводить: 'bird' (теж працює)
}
compare('cat', 'bird');
*/
/* //! join (Об’єднання елементів масиву в рядок)
TODO: Метод масиву, який з’єднує всі його елементи в один рядок із указаним роздільником.
 * - Повертає новий рядок, не змінюючи оригінальний масив.
 * - Якщо роздільник не вказаний, за замовчуванням використовується кома (,).
 * - Роздільник може бути будь-яким рядком (пробіл, тире тощо).
 * - Корисно для створення рядків із даних масиву, наприклад, списків чи речень.

TODO: Синтаксис:
array.join(роздільник);

TODO: Приклад 1. Об’єднання з комою
let colors = ['red', 'blue', 'green'];
console.log(colors.join()); // Виводить: 'red,blue,green'

TODO: Приклад 2. Об’єднання з пробілом
let words = ['I', 'love', 'coding'];
console.log(words.join(' ')); // Виводить: 'I love coding'

TODO: Приклад 3. Об’єднання з тире
let items = ['book', 'pen', 'paper'];
console.log(items.join('-')); // Виводить: 'book-pen-paper'
*/
/* //! split (Розбиття рядка для створення масиву)
TODO: Метод рядка, який розбиває його на масив за вказаним роздільником.
 * - Повертає новий масив, не змінюючи оригінальний рядок.
 * - Роздільник — символ чи рядок, за яким ділиться текст (наприклад, кома, пробіл).
 * - Якщо роздільник — порожній рядок (''), розбиває на окремі символи.
 * - Корисно для перетворення тексту в список елементів.

TODO: Синтаксис:
string.split(роздільник);

TODO: Приклад 1. Розбиття за комою
let list = 'cat,dog,bird';
console.log(list.split(',')); // Виводить: ['cat', 'dog', 'bird']

TODO: Приклад 2. Розбиття за пробілом
let sentence = 'Hello my friend';
console.log(sentence.split(' ')); // Виводить: ['Hello', 'my', 'friend']

TODO: Приклад 3. Розбиття на символи
let word = 'dog';
console.log(word.split('')); // Виводить: ['d', 'o', 'g']
*/
/* //! slice (Витягнення частини масиву)
TODO: Метод масиву, який повертає новий масив із вибраними елементами за вказаними індексами.
 * - Приймає два аргументи: start (з якого індексу почати) і end (до якого, не включно).
 * - Якщо end не вказано, копіює до кінця масиву.
 * - Від’ємні індекси рахуються з кінця (-1 — останній елемент).
 * - Не змінює оригінальний масив, лише повертає копію частини.
 * - Корисно для виділення потрібних шматків масиву.

TODO: Синтаксис:
array.slice(start, end);

TODO: Приклад 1. Від початку до кінця
let numbers = [10, 20, 30, 40, 50];
console.log(numbers.slice(0)); // Виводить: [10, 20, 30, 40, 50]

TODO: Приклад 2. Від середини до кінця
let numbers = [10, 20, 30, 40, 50];
console.log(numbers.slice(2)); // Виводить: [30, 40, 50]

TODO: Приклад 3. Від середини до передостаннього
let numbers = [10, 20, 30, 40, 50];
console.log(numbers.slice(2, -1)); // Виводить: [30, 40]
*/
/* //! concat (Об’єднання масивів)
TODO: Метод масиву, який об’єднує два або більше масивів у новий масив.
 * - Не змінює оригінальні масиви, повертає новий.
 * - Елементи додаються в порядку переданих масивів.
 * - Можна комбінувати кілька масивів одразу.
 * - Корисно для з’єднання списків даних.

TODO: Синтаксис:
array1.concat(array2, array3, ...);

TODO: Приклад 1. Об’єднання двох масивів
let arr1 = ['cat', 'dog'];
let arr2 = ['bird'];
console.log(arr1.concat(arr2)); // Виводить: ['cat', 'dog', 'bird']

TODO: Приклад 2. Об’єднання трьох масивів
let nums1 = [1, 2];
let nums2 = [3, 4];
let nums3 = [5];
console.log(nums1.concat(nums2, nums3)); // Виводить: [1, 2, 3, 4, 5]

TODO: Приклад 3. Об’єднання з порожнім масивом
let letters = ['a', 'b'];
let empty = [];
console.log(letters.concat(empty)); // Виводить: ['a', 'b']
*/
/* //! indexOf (Пошук індексу в масиві)
TODO: Метод масиву, який повертає індекс першого входження елемента або -1, якщо його немає.
 * - Пошук іде за суворим порівнянням (===), враховуючи тип і значення.
 * - Другий аргумент (необов’язковий) — індекс, із якого почати пошук.
 * - Індекси починаються з 0.
 * - Корисно для перевірки наявності елемента в масиві.

TODO: Синтаксис:
array.indexOf(елемент, [початковий_індекс]);

TODO: Приклад 1. Пошук простого елемента
let numbers = [10, 20, 30, 20];
console.log(numbers.indexOf(20)); // Виводить: 1 (перше входження)

TODO: Приклад 2. Пошук із початковим індексом
let letters = ['a', 'b', 'a', 'c'];
console.log(letters.indexOf('a', 1)); // Виводить: 2 (перше 'a' після індексу 1)

TODO: Приклад 3. Елемент відсутній
let fruits = ['apple', 'banana'];
console.log(fruits.indexOf('kiwi')); // Виводить: -1 (немає)
*/
/* //! unshift (Додавання елемента на початок масиву)
TODO: Метод масиву, який додає один або кілька елементів на початок і повертає нову довжину.
 * - Змінює оригінальний масив, зсуваючи існуючі елементи вправо.
 * - Елементи додаються в порядку їх передачі.
 * - Повертає число — нову довжину масиву.
 * - Корисно для додавання елементів на початок списку.

TODO: Синтаксис:
array.unshift(елемент1, елемент2, ...);

TODO: Приклад 1. Додавання одного елемента
let numbers = [2, 3];
console.log(numbers.unshift(1)); // Виводить: 3
console.log(numbers); // Виводить: [1, 2, 3]

TODO: Приклад 2. Додавання кількох елементів
let fruits = ['banana'];
console.log(fruits.unshift('apple', 'kiwi')); // Виводить: 3
console.log(fruits); // Виводить: ['apple', 'kiwi', 'banana']

TODO: Приклад 3. Додавання до порожнього масиву
let empty = [];
console.log(empty.unshift('start')); // Виводить: 1
console.log(empty); // Виводить: ['start']
*/
/* //! push (Додавання елемента в кінець масиву)
TODO: Метод масиву, який додає один або кілька елементів у кінець і повертає нову довжину.
 * - Змінює оригінальний масив, додаючи елементи в кінець.
 * - Елементи додаються в порядку їх передачі.
 * - Повертає число — нову довжину масиву.
 * - Корисно для додавання елементів у список.

TODO: Синтаксис:
array.push(елемент1, елемент2, ...);

TODO: Приклад 1. Додавання одного елемента
let colors = ['red', 'blue'];
console.log(colors.push('green')); // Виводить: 3
console.log(colors); // Виводить: ['red', 'blue', 'green']

TODO: Приклад 2. Додавання кількох елементів
let numbers = [1, 2];
console.log(numbers.push(3, 4)); // Виводить: 4
console.log(numbers); // Виводить: [1, 2, 3, 4]

TODO: Приклад 3. Додавання до порожнього масиву
let empty = [];
console.log(empty.push('end')); // Виводить: 1
console.log(empty); // Виводить: ['end']
*/
/* //! shift (Видалення першого елемента масиву)
TODO: Метод масиву, який видаляє перший елемент і повертає його.
 * - Змінює оригінальний масив, зсуваючи всі елементи вліво.
 * - Повертає видалений елемент, який можна зберегти.
 * - Якщо масив порожній, повертає undefined.
 * - Корисно для роботи з масивом як із чергою.

TODO: Синтаксис:
array.shift();

TODO: Приклад 1. Видалення першого елемента
let fruits = ['apple', 'banana', 'kiwi'];
console.log(fruits.shift()); // Виводить: 'apple'
console.log(fruits); // Виводить: ['banana', 'kiwi']

TODO: Приклад 2. Видалення з масиву з одним елементом
let numbers = [5];
console.log(numbers.shift()); // Виводить: 5
console.log(numbers); // Виводить: []

TODO: Приклад 3. Видалення з порожнього масиву
let empty = [];
console.log(empty.shift()); // Виводить: undefined
console.log(empty); // Виводить: []
*/
/* //! pop (Видалення останнього елемента масиву)
TODO: Метод масиву, який видаляє останній елемент і повертає його.
 * - Змінює оригінальний масив, зменшуючи його довжину.
 * - Повертає видалений елемент, який можна зберегти.
 * - Якщо масив порожній, повертає undefined.
 * - Корисно для роботи з масивом як із стеком.

TODO: Синтаксис:
array.pop();

TODO: Приклад 1. Видалення останнього елемента
let colors = ['red', 'blue', 'green'];
console.log(colors.pop()); // Виводить: 'green'
console.log(colors); // Виводить: ['red', 'blue']

TODO: Приклад 2. Видалення з масиву з одним елементом
let numbers = [10];
console.log(numbers.pop()); // Виводить: 10
console.log(numbers); // Виводить: []

TODO: Приклад 3. Видалення з порожнього масиву
let empty = [];
console.log(empty.pop()); // Виводить: undefined
console.log(empty); // Виводить: []
*/
/* //! forEach (Перебирання елементів масиву)
TODO: Метод масиву, який викликає задану функцію для кожного елемента, не повертаючи результату.
 * - Проходить по масиву зліва направо, застосовуючи функцію callback до кожного елемента.
 * - Не створює новий масив і завжди повертає undefined, незалежно від того, що робить callback.
 * - Не змінює оригінальний масив напряму, але callback може змінити його елементи.
 * - Корисно для простих дій із кожним елементом, наприклад, виведення чи оновлення значень.
 * - Альтернатива циклам for, коли не потрібен результат перебирання.

TODO: Синтаксис:
array.forEach((element, index, array) => {
    Виконуємо щось із елементом
});
 * - callback(element, index, array) — функція, яка викликається для кожного елемента:
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Виведення подвоєних чисел
let numbers = [1, 2, 3];
numbers.forEach(num => console.log(num * 2)); // Виводить: 2, 4, 6 (по черзі)
console.log(numbers); // Виводить: [1, 2, 3]

TODO: Приклад 2. Виведення з індексами
let fruits = ['apple', 'banana', 'kiwi'];
fruits.forEach((fruit, index) => console.log(`${index}: ${fruit}`)); // Виводить: '0: apple', '1: banana', '2: kiwi'

TODO: Приклад 3. Зміна масиву всередині
let values = [10, 20, 30];
values.forEach((value, index, arr) => arr[index] = value + 1);
console.log(values); // Виводить: [11, 21, 31]
*/
/* //! map (Перетворення масиву)
TODO: Метод масиву, який створює новий масив, застосовуючи функцію до кожного елемента старого.
 * - Проходить по масиву зліва направо, викликаючи callback для кожного елемента.
 * - Повертає новий масив тієї ж довжини, де кожен елемент — результат callback.
 * - Не змінює оригінальний масив, лише створює копію з новими значеннями.
 * - Корисно для перетворення даних, наприклад, множення чисел чи форматування тексту.
 * - На відміну від forEach, повертає результат, а не undefined.

TODO: Синтаксис:
array.map((element, index, array) => {
    Повертаємо нове значення
});
 * - callback(element, index, array) — функція, яка викликається для кожного елемента:
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Подвоєння чисел
let numbers = [1, 2, 3];
let doubled = numbers.map(num => num * 2);
console.log(doubled); // Виводить: [2, 4, 6]
console.log(numbers); // Виводить: [1, 2, 3]

TODO: Приклад 2. Нумерація елементів
let fruits = ['apple', 'banana'];
let numbered = fruits.map((fruit, index) => `${index + 1}. ${fruit}`);
console.log(numbered); // Виводить: ['1. apple', '2. banana']

TODO: Приклад 3. Перетворення тексту
let words = ['cat', 'dog'];
let upper = words.map(word => word.toUpperCase());
console.log(upper); // Виводить: ['CAT', 'DOG']
*/
/* //! flatMap (Перетворення та розгортання масиву)
TODO: Метод масиву, який створює новий масив, застосовуючи функцію до кожного елемента і розгортаючи вкладені масиви на один рівень.
 * - Спочатку діє як map: перетворює кожен елемент за допомогою callback.
 * - Потім "сплющує" вкладені масиви глибиною 1, додаючи їхні елементи в результат.
 * - Не змінює оригінальний масив, повертає новий із розгорнутими значеннями.
 * - Корисно, коли потрібно перетворити елементи й одразу отримати плоский список.
 * - Відмінність від map: map залишає вкладені масиви як є, flatMap їх розгортає.

TODO: Синтаксис:
array.flatMap((element, index, array) => {
    Повертаємо значення чи масив, який розгорнеться
});
 * - callback(element, index, array) — функція, яка викликається для кожного елемента:
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Подвоєння чисел із розгортанням
let numbers = [1, 2, 3];
let doubled = numbers.flatMap(num => [num, num * 2]);
console.log(doubled); // Виводить: [1, 2, 2, 4, 3, 6]
console.log(numbers); // Виводить: [1, 2, 3]

TODO: Приклад 2. Порівняння з map
let values = [1, 2];
let mapped = values.map(num => [num, num + 1]); // Залишає вкладені масиви
let flatMapped = values.flatMap(num => [num, num + 1]); // Розгортає їх
console.log(mapped); // Виводить: [[1, 2], [2, 3]]
console.log(flatMapped); // Виводить: [1, 2, 2, 3]

TODO: Приклад 3. Розбиття слів на літери
let words = ['hi', 'bye'];
let letters = words.flatMap(word => word.split(''));
console.log(letters); // Виводить: ['h', 'i', 'b', 'y', 'e']
*/
/* //! filter (Фільтрація елементів масиву)
TODO: Створює новий масив із елементами, відібраними за певним критерієм із колекції.
 * - array.filter(callback) — метод масиву, який фільтрує елементи, що відповідають умові callback.
 * - Не змінює оригінальний масив, повертає новий із відфільтрованими значеннями.
 * - Перебирає масив зліва направо, перевіряючи кожен елемент.
 * - Додає елемент у новий масив, якщо callback повертає true; ігнорує, якщо false.
 * - Повертає порожній масив, якщо жоден елемент не відповідає умові.
 * - Корисно для відбору даних, наприклад, чисел більше певного значення чи слів за довжиною.

TODO: Синтаксис:
array.filter((element, index, array) => {
    Повертаємо true, якщо елемент залишається
});
 * - callback(element, index, array) — функція, яка викликається для кожного елемента:
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Фільтр великих чисел
let numbers = [1, 5, 3, 7];
let big = numbers.filter(num => num > 4);
console.log(big); // Виводить: [5, 7]
console.log(numbers); // Виводить: [1, 5, 3, 7]

TODO: Приклад 2. Фільтр за індексом
let fruits = ['apple', 'banana', 'kiwi'];
let later = fruits.filter((fruit, index) => index > 0);
console.log(later); // Виводить: ['banana', 'kiwi']

TODO: Приклад 3. Фільтр без результату
let small = [1, 2, 3];
let none = small.filter(num => num > 5);
console.log(none); // Виводить: []
*/
/* //! find (Пошук першого елемента в масиві)
TODO: Знаходить і повертає перший елемент масиву, який відповідає умові, заданій у функції.
 * - array.find(callback) — метод масиву, який шукає перший елемент, що відповідає умові callback.
 * - Не змінює оригінальний масив, повертає лише один елемент або undefined.
 * - Перебирає масив зліва направо, зупиняється, коли callback повертає true.
 * - Повертає елемент, якщо умова виконана, або undefined, якщо жоден елемент не підходить.
 * - Корисно для пошуку першого відповідного значення, наприклад, першого великого числа.
 * - Відмінність від filter: find повертає один елемент, а не масив.

TODO: Синтаксис:
array.find((element, index, array) => {
    Повертаємо true, якщо елемент підходить
});
 * - callback(element, index, array) — функція, яка викликається для кожного елемента:
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Пошук великого числа
let numbers = [1, 4, 6, 3];
let big = numbers.find(num => num > 5);
console.log(big); // Виводить: 6
console.log(numbers); // Виводить: [1, 4, 6, 3]

TODO: Приклад 2. Пошук за індексом
let fruits = ['apple', 'banana', 'kiwi'];
let second = fruits.find((fruit, index) => index === 1);
console.log(second); // Виводить: 'banana'

TODO: Приклад 3. Пошук без результату
let small = [1, 2, 3];
let none = small.find(num => num > 5);
console.log(none); // Виводить: undefined
*/
/* //! every (Перевірка всіх елементів масиву)
TODO: Перевіряє, чи всі елементи масиву відповідають умові, заданій у функції, і повертає true або false.
 * - array.every(callback) — метод масиву, який повертає true, якщо кожен елемент відповідає умові callback.
 * - Не змінює оригінальний масив, лише перевіряє.
 * - Перебирає масив зліва направо, зупиняється на першому false.
 * - Повертає false, якщо хоча б один елемент не відповідає умові.
 * - Корисно для перевірки загальних властивостей, наприклад, чи всі числа позитивні.

TODO: Синтаксис:
array.every((element, index, array) => {
    Повертаємо true, якщо елемент відповідає
});
 * - callback(element, index, array) — функція, яка викликається для кожного елемента:
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Усі парні числа
let numbers = [2, 4, 6];
let allEven = numbers.every(num => num % 2 === 0);
console.log(allEven); // Виводить: true
console.log(numbers); // Виводить: [2, 4, 6]

TODO: Приклад 2. Перевірка індексів
let fruits = ['apple', 'banana'];
let allEarly = fruits.every((fruit, index) => index < 2);
console.log(allEarly); // Виводить: true

TODO: Приклад 3. Змішаний масив
let mixed = [2, 4, 5];
let allEvenMixed = mixed.every(num => num % 2 === 0);
console.log(allEvenMixed); // Виводить: false
*/
/* //! some (Перевірка хоча б одного елемента масиву)
TODO: Перевіряє, чи хоча б один елемент масиву відповідає умові, заданій у функції, і повертає true або false.
 * - array.some(callback) — метод масиву, який повертає true, якщо хоча б один елемент відповідає умові callback.
 * - Не змінює оригінальний масив, лише перевіряє.
 * - Перебирає масив зліва направо, зупиняється на першому true.
 * - Повертає false, якщо жоден елемент не відповідає умові.
 * - Корисно для перевірки наявності, наприклад, чи є число більше 5.

TODO: Синтаксис:
array.some((element, index, array) => {
    Повертаємо true, якщо елемент відповідає
});
 * - callback(element, index, array) — функція, яка викликається для кожного елемента:
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Наявність великого числа
let numbers = [1, 3, 7];
let hasBig = numbers.some(num => num > 5);
console.log(hasBig); // Виводить: true
console.log(numbers); // Виводить: [1, 3, 7]

TODO: Приклад 2. Наявність другого елемента
let fruits = ['apple', 'banana'];
let hasSecond = fruits.some((fruit, index) => index === 1);
console.log(hasSecond); // Виводить: true

TODO: Приклад 3. Відсутність коротких слів
let words = ['cake', 'bread'];
let hasShort = words.some(word => word.length < 3);
console.log(hasShort); // Виводить: false
*/
/* //! reduce (Агрегація значень у масиві)
TODO: Метод масиву, який обчислює одне значення, застосовуючи функцію до всіх елементів і накопичуючи результат.
 * - array.reduce(callback, initialValue) — викликає callback для кожного елемента, оновлюючи accumulator.
 * - Не змінює оригінальний масив, повертає кінцеве значення (число, рядок, об’єкт тощо).
 * - Перебирає масив зліва направо, додаючи кожен елемент до accumulator.
 * - initialValue — початкове значення для accumulator:
 *   - Якщо вказано (наприклад, 0), перебирання починається з першого елемента, а accumulator стартує з цього значення.
 *   - Якщо не вказано, accumulator бере перший елемент масиву, а перебирання починається з другого.
 * - Корисно для підсумовування чисел, об’єднання слів чи створення об’єктів із масиву.
 * - Без initialValue може бути неочевидно, з чого почати, особливо для порожніх масивів (викличе помилку).

TODO: Синтаксис:
array.reduce((accumulator, element, index, array) => {
    Оновлюємо accumulator
}, initialValue);
 * - callback(accumulator, element, index, array) — функція, яка викликається для кожного елемента:
 *   - accumulator — проміжний результат, що зберігає значення між викликами.
 *   - element — поточний елемент масиву.
 *   - index — індекс поточного елемента (необов’язковий).
 *   - array — сам масив (необов’язковий).

TODO: Приклад 1. Сума чисел із початковим значенням
let numbers = [1, 2, 3];
let sum = numbers.reduce((acc, num) => acc + num, 0);
console.log(sum); // Виводить: 6 (0 + 1 + 2 + 3)
console.log(numbers); // Виводить: [1, 2, 3]

TODO: Приклад 2. Сума без початкового значення
let values = [1, 2, 3];
let sumNoInit = values.reduce((acc, num) => acc + num);
console.log(sumNoInit); // Виводить: 6 (1 + 2 + 3, acc починається з 1)

TODO: Приклад 3. Підрахунок букв
let letters = ['a', 'b', 'a'];
let count = letters.reduce((acc, letter) => {
  acc[letter] = (acc[letter] || 0) + 1;
  return acc;
}, {});
console.log(count); // Виводить: { a: 2, b: 1 }
*/
/* //! toSorted (Сортування масиву без зміни оригіналу)
TODO: Метод масиву, який створює новий відсортований масив, не змінюючи вихідний.
 * - array.toSorted(compareFunction) — повертає новий масив, відсортований за правилом із compareFunction.
 * - Не впливає на оригінальний масив, на відміну від sort().
 * - Якщо compareFunction не вказано, сортує елементи як рядки за Unicode.
 * - Корисно для впорядкування чисел чи слів із збереженням початкового порядку.
 * - Функція порівняння: a - b для зростання, b - a для спадання.

TODO: Синтаксис:
array.toSorted((a, b) => {
    Логіка сортування
});
 * - compareFunction(a, b) — функція порівняння, яка визначає порядок сортування:
 *   - Повертає від’ємне число, якщо a має бути перед b.
 *   - Повертає позитивне число, якщо a має бути після b.
 *   - Повертає 0, якщо порядок не змінюється.

TODO: Приклад 1. Сортування чисел
let numbers = [3, 1, 4];
let sorted = numbers.toSorted((a, b) => a - b);
console.log(sorted); // Виводить: [1, 3, 4]
console.log(numbers); // Виводить: [3, 1, 4]

TODO: Приклад 2. Сортування слів
let fruits = ['banana', 'apple'];
let alphabet = fruits.toSorted();
console.log(alphabet); // Виводить: ['apple', 'banana']

TODO: Приклад 3. Сортування за спаданням
let values = [5, 2, 8];
let descending = values.toSorted((a, b) => b - a);
console.log(descending); // Виводить: [8, 5, 2]
*/
/* //! Spread (Розгортання)
TODO: Оператор ..., який розгортає елементи масиву, об’єкта чи рядка в окремі значення.
 * - Використовується для "розпакування" елементів у місце, де потрібні окремі значення (наприклад, у масиві чи аргументах функції).
 * - Не змінює оригінальний масив чи об’єкт, лише копіює їхні елементи чи властивості.
 * - Працює з будь-якими ітерованими об’єктами (масиви, рядки, Set тощо).
 * - Корисно для копіювання масивів, об’єднання даних чи передачі елементів у функцію.
 * - Відмінність від rest: spread розгортає "назовні", а rest збирає "всередину".

TODO: Синтаксис:
   У масивах
let newArray = [...array];
   В аргументах функції
functionName(...array);
   В об’єктах
let newObject = { ...object };

TODO: Приклад 1. Копіювання масиву
let numbers = [1, 2, 3];
let copy = [...numbers];
console.log(copy); // Виводить: [1, 2, 3]
console.log(numbers); // Виводить: [1, 2, 3] (оригінал не змінився)

TODO: Приклад 2. Об’єднання масивів
let fruits = ['apple', 'banana'];
let moreFruits = [...fruits, 'kiwi'];
console.log(moreFruits); // Виводить: ['apple', 'banana', 'kiwi']

TODO: Приклад 3. Передача в функцію
let values = [1, 2, 3];
let sum = (a, b, c) => a + b + c;
console.log(sum(...values)); // Виводить: 6 (розгортає 1, 2, 3 у a, b, c)
*/
/* //! Rest (Збирання)
TODO: Оператор ..., який збирає кілька елементів у масив, коли використовується в параметрах функції чи деструктуризації.
 * - Використовується для "упаковки" залишкових значень в один масив.
 * - Працює лише в контексті функцій (параметри) або деструктуризації (масиви/об’єкти).
 * - Завжди стоїть останнім у списку параметрів функції чи деструктуризації.
 * - Корисно для роботи з невизначеною кількістю аргументів чи витягнення "решти" даних.
 * - Відмінність від spread: rest збирає "всередину" в масив, а spread розгортає "назовні".

TODO: Синтаксис:
  У параметрах функції
function name(param1, ...rest) { ... }
  У деструктуризації масиву
let [first, ...rest] = array;
  У деструктуризації об’єкта
let { prop1, ...rest } = object;

TODO: Приклад 1. Збирання аргументів функції
function showArgs(first, ...others) {
  console.log(first); // Виводить: 'apple'
  console.log(others); // Виводить: ['banana', 'kiwi']
}
showArgs('apple', 'banana', 'kiwi');

TODO: Приклад 2. Деструктуризація масиву
let fruits = ['apple', 'banana', 'kiwi'];
let [first, ...rest] = fruits;
console.log(first); // Виводить: 'apple'
console.log(rest); // Виводить: ['banana', 'kiwi']

TODO: Приклад 3. Збирання всіх аргументів
function sum(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}
console.log(sum(1, 2, 3, 4)); // Виводить: 10
*/
//#endregion
