//#region //? Цикли (Теорія)
/* //! Префікс і Постфікс (Prefix and Postfix Operators)
TODO: Оператори ++ і -- змінюють значення змінної на 1 із різницею в моменті повернення значення.
* Префікс (++x, --x): спочатку змінює значення змінної, потім повертає нове значення.
* Постфікс (x++, x--): спочатку повертає поточне значення змінної, потім змінює його.
* Застосовуються до числових змінних (збільшення або зменшення на 1).
* Використовуються для лічильників у циклах, обчислень чи оновлення значень.
* Працюють тільки з операндами, які можна змінити (змінні, а не константи).

TODO: Приклад із префіксним інкрементом Синтаксис: ++x
let a = 5;
console.log(++a); // Спочатку a стає 6, потім повертає 6
console.log(a);   // Виводить: 6 (значення вже змінено)

TODO: Приклад із постфіксним інкрементом Синтаксис: x++
let b = 5;
console.log(b++); // Спочатку повертає 5, потім b стає 6
console.log(b);   // Виводить: 6 (значення змінено після повернення)

TODO: Приклад із префіксним декрементом Синтаксис: --x
let c = 10;
console.log(--c); // Спочатку c стає 9, потім повертає 9
console.log(c);   // Виводить: 9 (значення вже змінено)

TODO: Приклад із постфіксним декрементом Синтаксис: x--
let d = 10;
console.log(d--); // Спочатку повертає 10, потім d стає 9
console.log(d);   // Виводить: 9 (значення змінено після повернення)

*/
/* //! break (Переривання циклу або switch)
TODO: Негайно завершує виконання циклу або switch, переходячи до коду після них.
 * - Оператор, який припиняє найближчий зовнішній цикл (for, while, do...while) або switch.
 * - Використовується для дострокового виходу з циклу, коли умова виконана.
 * - У switch: запобігає fall-through (виконанню наступних case).
 * - Не впливає на код поза циклом чи switch, де він викликаний.
 * - Не повертає значення, лише контролює потік виконання.
 * - Корисно для зупинки циклу чи switch за певною умовою.

TODO: Синтаксис:
break;

TODO: Приклад 1. Приклад із циклом for
for (let i = 0; i < 10; i++) {
  if (i === 5) {
    break;
  }
  console.log(`Число: ${i}`);
}; // Виводить: 'Число: 0', 'Число: 1', 'Число: 2', 'Число: 3', 'Число: 4'

TODO: Приклад 2. Приклад із циклом while
let num = 0;
while (num < 10) {
  if (num === 3) {
    break;
  }
  console.log(`Значення: ${num}`);
  num++;
}; // Виводить: 'Значення: 0', 'Значення: 1', 'Значення: 2'

TODO: Приклад 3. Приклад із switch
const day = 'Wednesday';
switch (day) {
  case 'Monday':
    console.log('Початок тижня');
    break;
  case 'Wednesday':
    console.log('Середина тижня');
    break;
  case 'Friday':
    console.log('Кінець тижня');
    break;
  default:
    console.log('Інший день');
}; // Виводить: 'Середина тижня'
*/
/* //! continue (Пропуск ітерації в циклі)
TODO: Пропускає поточну ітерацію циклу і переходить до наступної, не завершуючи цикл повністю.
 * - Оператор, який діє всередині циклів (for, while, do...while), пропускаючи залишок коду в поточній ітерації.
 * - Використовується для пропуску певних значень чи умов без зупинки циклу.
 * - Не завершує цикл (на відміну від break), а лише переходить до наступного кроку.
 * - Застосовується, коли потрібно "фільтрувати" ітерації, наприклад, пропускати непарні числа чи небажані значення.
 * - Корисно для вибіркового виконання коду в циклі.

TODO: Синтаксис:
continue;

TODO: Приклад 1. Пропуск непарних чисел у циклі for
for (let i = 0; i < 10; i++) {
  if (i % 2 !== 0) {
    continue;
  }
  console.log(`Парне число: ${i}`);
}; // Виводить: 'Парне число: 0', 'Парне число: 2', 'Парне число: 4', 'Парне число: 6', 'Парне число: 8'

TODO: Приклад 2. Пропуск у циклі while
let num = 0;
while (num < 5) {
  num++;
  if (num === 3) {
    continue;
  }
  console.log(`Значення: ${num}`);
}; // Виводить: 'Значення: 1', 'Значення: 2', 'Значення: 4', 'Значення: 5'

TODO: Приклад 3. Пропуск символів у рядку
const text = 'Hello';
for (let i = 0; i < text.length; i++) {
  if (text[i] === 'l') {
    continue;
  }
  console.log(`Символ: ${text[i]}`);
}; // Виводить: 'Символ: H', 'Символ: e', 'Символ: o'
TODO: Приклад 4. Пропуск чисел із детальним повідомленням
for (let i = 0; i <= 20; i++) {
  if (i % 4 === 0) {
    console.log(`Число ${i} кратне 4, пропускаємо цю ітерацію`);
    continue;
  }
  let square = i * i;
  let isEven = i % 2 === 0 ? 'парне' : 'непарне';
  console.log(`Число ${i} не кратне 4, квадрат: ${square}, тип: ${isEven}`);
}; // Виводить:
  'Число 0 кратне 4, пропускаємо цю ітерацію'
  'Число 1 не кратне 4, квадрат: 1, тип: непарне'
  'Число 2 не кратне 4, квадрат: 4, тип: парне'
  'Число 3 не кратне 4, квадрат: 9, тип: непарне'
  'Число 4 кратне 4, пропускаємо цю ітерацію'
  'Число 5 не кратне 4, квадрат: 25, тип: непарне'
  'Число 6 не кратне 4, квадрат: 36, тип: парне'
  'Число 7 не кратне 4, квадрат: 49, тип: непарне'
  'Число 8 кратне 4, пропускаємо цю ітерацію'
  'Число 9 не кратне 4, квадрат: 81, тип: непарне'
  'Число 10 не кратне 4, квадрат: 100, тип: парне'
*/
/* //! while (Цикл із передумовою)
TODO: Повторює виконання блоку коду, доки задана умова залишається істинною (true).
 * - Цикл із передумовою, який перевіряє умову перед кожною ітерацією і виконує блок, якщо умова true.
 * - Умова — вираз, який приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Виконання припиняється, коли умова стає false; може бути безкінечним, якщо умова завжди true.
 * - Корисно для повторення дій із динамічною умовою.

TODO: Синтаксис:
while (умова) {
    Код, який виконується
}

TODO: Приклад 1. Простий приклад із лічильником
let count = 0;
while (count < 5) {
  console.log(`Лічильник: ${count}`);
  count++;
}; // Виводить: 'Лічильник: 0', 'Лічильник: 1', 'Лічильник: 2', 'Лічильник: 3', 'Лічильник: 4'

TODO: Приклад 2. Приклад із рядком
let text = 'Hello';
let index = 0;
while (index < text.length) {
  console.log(`Символ: ${text[index]}`);
  index++;
}; // Виводить: 'Символ: H', 'Символ: e', 'Символ: l', 'Символ: l', 'Символ: o'

TODO: Приклад 3. Приклад із умовою зупинки
let value = 100;
while (value >= 50) {
  console.log(`Значення: ${value}`);
  value -= 10;
}; // Виводить: 'Значення: 100', 'Значення: 90', 'Значення: 80', 'Значення: 70', 'Значення: 60', 'Значення: 50'
*/
/* //! do...while (Цикл із постумовою)
TODO: Виконує блок коду принаймні один раз, а потім повторює його, доки умова залишається істинною (true).
 * - Цикл із постумовою, який спочатку виконує блок коду, а потім перевіряє умову для подальших ітерацій.
 * - Умова — вираз, який приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Гарантує хоча б одне виконання блоку, навіть якщо умова спочатку false.
 * - Корисно, коли потрібно виконати код хоча б раз перед перевіркою.

TODO: Синтаксис:
do {
    Код, який виконується
} while (умова);

TODO: Приклад 1. Простий приклад із лічильником
let count = 0;
do {
  console.log(`Лічильник: ${count}`);
  count++;
} while (count < 5);
  Виводить: 'Лічильник: 0', 'Лічильник: 1', 'Лічильник: 2', 'Лічильник: 3', 'Лічильник: 4'

TODO: Приклад 2. Приклад із зменшенням
let number = 10;
do {
  console.log(`Число: ${number}`);
  number--;
} while (number > 0);
  Виводить: 'Число: 10', 'Число: 9', 'Число: 8', 'Число: 7', 'Число: 6', 'Число: 5', 'Число: 4', 'Число: 3', 'Число: 2', 'Число: 1'

TODO: Приклад 3. Приклад із однією ітерацією
let value = 0;
do {
  console.log(`Значення: ${value}`);
  value--;
} while (value > 0);
  Виводить: 'Значення: 0' (виконується лише раз)
*/
/* //! for (Цикл з лічильником)
TODO: Використовується для багаторазового виконання блоку коду з контрольованою кількістю ітерацій.
 * - `for (ініціалізація; умова; оновлення)` — структура циклу з трьома частинами.
 * - Ініціалізація — задає початкове значення лічильника (наприклад, `let i = 0`).
 * - Умова — перевіряється перед кожною ітерацією, якщо `true`, цикл продовжується.
 * - Оновлення — змінює лічильник після кожної ітерації (`i++`, `i -= 2` тощо).
 * - `i++` — збільшує лічильник на 1 після кожної ітерації (наприклад, з 0 до 1).
 * - `i--` — зменшує лічильник на 1 після кожної ітерації (наприклад, з 10 до 9).
 * - `i += 2` — додає 2 до лічильника після кожної ітерації (наприклад, з 0 до 2).
 * - Корисно для перебору масивів, зворотного відліку чи повторення дій.

TODO: Синтаксис:
for (ініціалізація; умова; оновлення) {
    Код, який виконується на кожній ітерації
}

TODO: Приклад 1. Простий приклад циклу for
for (let i = 0; i < 5; i++) {
  console.log(i);
}; // Виводить: 0, 1, 2, 3, 4

TODO: Приклад 2. Приклад із зворотним відліком
for (let i = 10; i >= 1; i--) {
  console.log(i);
}; // Виводить: 10, 9, 8, 7, 6, 5, 4, 3, 2, 1

TODO: Приклад 3. Перебір масиву за допомогою довжини
const fruits = ['apple', 'banana', 'kiwi'];
for (let i = 0; i < fruits.length; i++) {
  console.log(fruits[i]);
}; // Виводить: 'apple', 'banana', 'kiwi'
*/
/* //! for...of (Цикл для перебору елементів)
TODO: Цикл, який перебирає елементи ітерованих об’єктів, таких як масиви чи рядки.
 * - `for...of` — це спосіб пройтись по кожному елементу колекції (масиву, рядка тощо).
 * - Працює з ітерованими об’єктами, які мають властивість [Symbol.iterator].
 * - На кожній ітерації повертає елемент, а не індекс (на відміну від for).
 * - Не змінює саму колекцію, лише читає її значення.
 * - Корисно для простого перебору елементів без роботи з індексами.

TODO: Синтаксис:
for (let змінна of колекція) {
    Робота з елементом (змінна)
}

TODO: Приклад 1. Простий приклад із масивом
const numbers = [1, 2, 3];
for (let num of numbers) {
  console.log(num);
}; // Виводить: 1, 2, 3

TODO: Приклад 2. Приклад із рядком
const text = 'Hello';
for (let char of text) {
  console.log(char);
}; // Виводить: 'H', 'e', 'l', 'l', 'o'

TODO: Приклад 3. Перебір різних колекцій
const fruits = ['apple', 'banana', 'kiwi'];
for (let fruit of fruits) {
  console.log(fruit);
}; // Виводить: 'apple', 'banana', 'kiwi'
*/
/* //! for з if (Цикл із вкладеною умовою)
TODO: Виконує цикл із лічильником, а всередині перевіряє умову для вибіркового виконання коду.
 * - Комбінація циклу for і умовного оператора if для фільтрації чи вибіркової обробки ітерацій.
 * - for: повторює блок коду задану кількість разів із лічильником (ініціалізація; умова; оновлення).
 * - if: перевіряє умову всередині циклу, виконуючи блок лише за true.
 * - Умова if приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Корисно для вибіркового виконання дій у циклі.

TODO: Синтаксис:
for (ініціалізація; умова; оновлення) {
  if (умова) {
      Код, який виконується за true
  }
}

TODO: Приклад 1. Виведення парних чисел
for (let i = 0; i < 10; i++) {
  if (i % 2 === 0) {
    console.log(`Парне число: ${i}`);
  }
}; // Виводить: 'Парне число: 0', 'Парне число: 2', 'Парне число: 4', 'Парне число: 6', 'Парне число: 8'

TODO: Приклад 2. Перевірка символів у рядку
const text = 'Hello';
for (let index = 0; index < text.length; index++) {
  if (text[index] === 'l') {
    console.log(`Знайдено 'l' на позиції: ${index}`);
  }
}; // Виводить: 'Знайдено 'l' на позиції: 2', 'Знайдено 'l' на позиції: 3'

TODO: Приклад 3. Числа в діапазоні з умовою
for (let num = 5; num <= 15; num++) {
  if (num > 10) {
    console.log(`Число більше 10: ${num}`);
  }
}; // Виводить: 'Число більше 10: 11', 'Число більше 10: 12', 'Число більше 10: 13', 'Число більше 10: 14', 'Число більше 10: 15'
*/
//#endregion

//#region //? Цикли (Практика)
/* //! for (Виведення парних чисел у зворотному порядку)
TODO: Функція, яка виводить парні числа від 20 до 2 у спадному порядку.
 * - Перебирає числа від 20 до 2 включно з кроком -2.
 * - Виводить кожне число в консоль.
 * - Усі числа в діапазоні парні завдяки декременту на 2.
 * - Нічого не повертає, лише виводить результат.
 * - Корисно для відображення послідовності парних чисел у зворотному порядку.

TODO: Task
function printEvenNumbersDescending() {
}

console.log(printEvenNumbersDescending()); // 20, 18, 16, 14, 12, 10, 8, 6, 4, 2

TODO: Answer
function printEvenNumbersDescending() {
  for (let i = 20; i >= 2; i -= 2) {
    console.log(i);
  }
}

console.log(printEvenNumbersDescending()); // 20, 18, 16, 14, 12, 10, 8, 6, 4, 2
*/
/* //! for (Виведення парних чисел у прямому порядку)
TODO: Функція, яка виводить парні числа від 2 до 20 у зростаючому порядку.
 * - Перебирає числа від 2 до 20 включно з кроком +2.
 * - Виводить кожне число в консоль.
 * - Усі числа в діапазоні парні завдяки інкременту на 2.
 * - Нічого не повертає, лише виводить результат.
 * - Корисно для відображення послідовності парних чисел у прямому порядку.

TODO: Task
function printEvenNumbersAscending() {
}

console.log(printEvenNumbersAscending()); // 2, 4, 6, 8, 10, 12, 14, 16, 18, 20

TODO: Answer
function printEvenNumbersAscending() {
  for (let i = 2; i <= 20; i += 2) {
    console.log(i);
  }
}

console.log(printEvenNumbersAscending()); // 2, 4, 6, 8, 10, 12, 14, 16, 18, 20
*/
/* //! for (Виведення чисел, кратних 5)
TODO: Функція, яка виводить усі числа від 0 до 50, які діляться на 5 без остачі.
 * - Перебирає числа від 0 до 50 включно.
 * - Перевіряє, чи число ділиться на 5 без остачі (парне ділення).
 * - Якщо умова виконується, виводить число в консоль.
 * - Нічого не повертає, лише виводить результат.
 * - Корисно для відображення чисел, кратних заданому значенню.

TODO: Task
function printMultiplesOfFive() {
}

console.log(printMultiplesOfFive()); // 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50

TODO: Answer
function printMultiplesOfFive() {
  for (let i = 0; i <= 50; i++) {
    if (i % 5 === 0) {
      console.log(i);
    }
  }
}

console.log(printMultiplesOfFive()); // 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50
*/
/* //! for (Виведення парних чисел у діапазоні)
TODO: Функція, яка виводить парні числа в заданому діапазоні від start до end, а для непарних повідомляє, що вони непарні.
 * - Функція приймає два параметри: початок (start) і кінець (end) діапазону.
 * - Перебирає всі числа від start до end включно.
 * - Якщо число парне (ділиться на 2 без остачі), виводить його в консоль.
 * - Якщо число непарне, виводить повідомлення з числом і текстом " - непарне число".
 * - Корисно для відображення парних чисел у діапазоні з поясненням для непарних.

TODO: Task
function printEvenNumbers(start, end) {
}

console.log(printEvenNumbers(1, 10)); // 2, 4, 6, 8, 10
console.log(printEvenNumbers(3, 15)); // 4, 6, 8, 10, 12, 14
console.log(printEvenNumbers(6, 6)); // 6
console.log(printEvenNumbers(7, 7)); // ''

TODO: Answer
function printEvenNumbers(start, end) {
  for (let i = start; i <= end; i++) {
    if (i % 2 === 0) {
      console.log(i);
    } else {
      console.log(i + ' - непарне число');
    }
  }
}

console.log(printEvenNumbers(1, 10)); // 2, 4, 6, 8, 10
console.log(printEvenNumbers(3, 15)); // 4, 6, 8, 10, 12, 14
console.log(printEvenNumbers(6, 6)); // 6
console.log(printEvenNumbers(7, 7)); // ''

*/
/* //! for...of (Сума квадратів чисел)
TODO: Функція, яка підносить у квадрат кожне число масиву і повертає суму результатів.
 * - Функція приймає один параметр: масив чисел (numbers).
 * - Перебирає всі числа в масиві.
 * - Кожне число підносить до квадрата (множить саме на себе).
 * - Додає всі квадрати до загальної суми.
 * - Корисно для обчислення суми квадратів чисел у масиві.

TODO: Task
function squareSum(numbers) {
}

console.log(squareSum([1, 2]));        // 5 (1² + 2² = 1 + 4)
console.log(squareSum([1, 2, 3]));    // 14 (1² + 2² + 3² = 1 + 4 + 9)
console.log(squareSum([0, 3, 4, 5])); // 50 (0² + 3² + 4² + 5² = 0 + 9 + 16 + 25)
console.log(squareSum([0]));           // 0 (0² = 0)

TODO: Answer
function squareSum(numbers) {
  let sum = 0;
  for (let number of numbers) {
    sum += Math.pow(number, 2);
  }
  return sum;
}

console.log(squareSum([1, 2]));        // 5 (1² + 2² = 1 + 4)
console.log(squareSum([1, 2, 3]));    // 14 (1² + 2² + 3² = 1 + 4 + 9)
console.log(squareSum([0, 3, 4, 5])); // 50 (0² + 3² + 4² + 5² = 0 + 9 + 16 + 25)
console.log(squareSum([0]));           // 0 (0² = 0)
*/
//#endregion
