//#region //? Цикли (Теорія)
/* //! Префікс і Постфікс (Prefix and Postfix Operators)
TODO: Оператори ++ і --, які змінюють значення змінної на 1, із різницею в моменті повернення значення.
 * - Префікс (++x, --x): спочатку змінює значення змінної, потім повертає нове значення.
 * - Постфікс (x++, x--): спочатку повертає поточне значення змінної, потім змінює його.
 * - Застосовуються до числових змінних (збільшення або зменшення на 1).
 * - Використовуються для лічильників у циклах, обчислень чи оновлення значень.
 * - Працюють тільки з операндами, які можна змінити (змінні, а не константи).

TODO: Приклад із префіксним інкрементом
let a = 5;
console.log(++a); // Спочатку a стає 6, потім повертає 6
console.log(a);   // Виводить: 6 (значення вже змінено)

TODO: Приклад із постфіксним інкрементом
let b = 5;
console.log(b++); // Спочатку повертає 5, потім b стає 6
console.log(b);   // Виводить: 6 (значення змінено після повернення)

TODO: Приклад із префіксним декрементом
let c = 10;
console.log(--c); // Спочатку c стає 9, потім повертає 9
console.log(c);   // Виводить: 9 (значення вже змінено)

TODO: Приклад із постфіксним декрементом
let d = 10;
console.log(d--); // Спочатку повертає 10, потім d стає 9
console.log(d);   // Виводить: 9 (значення змінено після повернення)
*/
/* //! break (Переривання циклу або switch)
TODO: Негайно завершує виконання циклу або switch, переходячи до коду після них.
 * - Оператор, який припиняє найближчий зовнішній цикл (for, while, do...while) або switch.
 * - Використовується для дострокового виходу з циклу, коли умова виконана.
 * - У switch: запобігає fall-through (виконанню наступних case).
 * - Не впливає на код поза циклом чи switch, де він викликаний.
 * - Не повертає значення, лише контролює потік виконання.

TODO: Приклад із циклом for
for (let i = 0; i < 10; i++) {
  if (i === 5) {
    break; // Перериває цикл, коли i дорівнює 5
  }
  console.log(`Число: ${i}`); // Виводить від 0 до 4
}

TODO: Приклад із циклом while
let num = 0;
while (num < 10) {
  if (num === 3) {
    break; // Перериває цикл, коли num дорівнює 3
  }
  console.log(`Значення: ${num}`); // Виводить від 0 до 2
  num++;
}

TODO: Приклад із switch
const day = 'Wednesday';
switch (day) {
  case 'Monday':
    console.log('Початок тижня');
    break;
  case 'Wednesday':
    console.log('Середина тижня'); // Виконується і зупиняється
    break;
  case 'Friday':
    console.log('Кінець тижня');
    break;
  default:
    console.log('Інший день');
}

TODO: Приклад із вкладеним циклом
for (let i = 0; i < 3; i++) {
  for (let j = 0; j < 3; j++) {
    if (j === 1) {
      break; // Перериває лише внутрішній цикл
    }
    console.log(`i: ${i}, j: ${j}`); // Виводить лише j = 0 для кожного i
  }
}
*/
/* //! while (Цикл із передумовою)
TODO: Повторює виконання блоку коду, доки задана умова залишається істинною (true).
 * - Цикл із передумовою, який перевіряє умову перед кожною ітерацією і виконує блок, якщо умова true.
 * - Умова — вираз, який приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Виконання припиняється, коли умова стає false; може бути безкінечним, якщо умова завжди true.

TODO: Простий приклад із лічильником
let count = 0;
while (count < 5) {
  console.log(`Лічильник: ${count}`); // Виводить значення від 0 до 4
  count++; // Збільшує count на 1
}

TODO: Приклад із рядком
let text = 'Hello';
let index = 0;
while (index < text.length) {
  console.log(`Символ: ${text[index]}`); // Виводить кожен символ рядка
  index++; // Збільшує індекс
}

TODO: Приклад із умовою зупинки
let value = 100;
while (value >= 50) {
  console.log(`Значення: ${value}`); // Виводить від 100 до 50
  value -= 10; // Зменшує value на 10
}
*/
/* //! do...while (Цикл із постумовою)
TODO: Виконує блок коду принаймні один раз, а потім повторює його, доки умова залишається істинною (true).
 * - Цикл із постумовою, який спочатку виконує блок коду, а потім перевіряє умову для подальших ітерацій.
 * - Умова — вираз, який приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Гарантує хоча б одне виконання блоку, навіть якщо умова спочатку false.

TODO: Простий приклад із лічильником
let count = 0;
do {
  console.log(`Лічильник: ${count}`); // Виводить значення від 0 до 4
  count++; // Збільшує count на 1
} while (count < 5);

TODO: Приклад із зменшенням
let number = 10;
do {
  console.log(`Число: ${number}`); // Виводить від 10 до 1
  number--; // Зменшує number на 1
} while (number > 0);

TODO: Приклад із рядком
let text = 'Hello';
let index = 0;
do {
  console.log(`Символ: ${text[index]}`); // Виводить кожен символ рядка
  index++; // Збільшує індекс
} while (index < text.length);

TODO: Приклад із однією ітерацією
let value = 0;
do {
  console.log(`Значення: ${value}`); // Виконується один раз
  value--; // Зменшує value на 1
} while (value > 0);
*/
/* //! for (Цикл із лічильником)
TODO: Повторює виконання блоку коду задану кількість разів із використанням лічильника.
 * - Цикл із лічильником, який складається з ініціалізації, умови та оновлення.
 * - Синтаксис: for (ініціалізація; умова; оновлення) { код }.
 * - Ініціалізація: виконується один раз перед початком циклу (зазвичай задає лічильник).
 * - Умова: перевіряється перед кожною ітерацією, приводиться до булевого типу (true/false).
 * - Оновлення: виконується після кожної ітерації для зміни лічильника.
 * - Truthy значення: ненульові числа, непорожні рядки тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.

TODO: Простий приклад із лічильником
for (let i = 0; i < 5; i++) {
  console.log(`Лічильник: ${i}`); // Виводить значення від 0 до 4
}


TODO: Приклад із рядком
const text = 'Hello';
for (let index = 0; index < text.length; index++) {
  console.log(`Символ: ${text[index]}`); // Виводить кожен символ рядка
}

TODO: Приклад із кроком
for (let value = 100; value >= 50; value -= 10) {
  console.log(`Значення: ${value}`); // Виводить від 100 до 50 із кроком 10
}
*/
/* //! for з if (Цикл із вкладеною умовою)
TODO: Виконує цикл із лічильником, а всередині перевіряє умову для вибіркового виконання коду.
 * - Комбінація циклу for і умовного оператора if для фільтрації чи вибіркової обробки ітерацій.
 * - for: повторює блок коду задану кількість разів із лічильником (ініціалізація; умова; оновлення).
 * - if: перевіряє умову всередині циклу, виконуючи блок лише за true.
 * - Умова if приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.

TODO: Приклад із виведенням парних чисел
for (let i = 0; i < 10; i++) {
  if (i % 2 === 0) {
    console.log(`Парне число: ${i}`); // Виводить лише парні числа від 0 до 8
  }
}

TODO: Приклад із рядком і перевіркою символів
const text = 'Hello';
for (let index = 0; index < text.length; index++) {
  if (text[index] === 'l') {
    console.log(`Знайдено 'l' на позиції: ${index}`); // Виводить позиції 'l'
  }
}

TODO: Приклад із числовим діапазоном
for (let num = 5; num <= 15; num++) {
  if (num > 10) {
    console.log(`Число більше 10: ${num}`); // Виводить числа від 11 до 15
  }
}

TODO: Приклад із зворотним відліком і умовою
for (let value = 5; value >= 0; value--) {
  if (value < 3) {
    console.log(`Значення менше 3: ${value}`); // Виводить значення від 2 до 0
  }
}
*/

//#endregion

//#region //? Цикли (Практика)
/* //! Math.pow() (Степінь)
TODO: Доповніть функцію квадратної суми так, щоб вона повертала в квадрат кожне передане їй число, а потім додати результат
function squareSum(numbers) {
}

console.log(squareSum([1, 2]));
console.log(squareSum([1, 2, 3]));
console.log(squareSum([0, 3, 4, 5]));
console.log(squareSum([0]));

.//? Рішення
function squareSum(numbers) {
  let sum = 0;
  for (let number of numbers) {
    sum += Math.pow(number, 2);
  }
  return sum;
}

console.log(squareSum([1, 2]));
console.log(squareSum([1, 2, 3]));
console.log(squareSum([0, 3, 4, 5]));
console.log(squareSum([0]));
*/
//#endregion
