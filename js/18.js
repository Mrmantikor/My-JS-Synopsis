//#region //?  (–ü—Ä–∞–∫—Ç–∏–∫–∞)
/* //! Arrays (–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º)
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–≤–∞ –º–∞—Å–∏–≤–∏, –¥–µ –¥—Ä—É–≥–∏–π —î –∫–æ–ø—ñ—î—é –ø–µ—Ä—à–æ–≥–æ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º, –¥–æ–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –¥–æ –ø–µ—Ä—à–æ–≥–æ –º–∞—Å–∏–≤—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–º—ñ–Ω–∏ –≤ –æ–±–æ—Ö.
 * - –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ arr1 —ñ–∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ [1, 2, 3].
 * - –ü—Ä–∏–≤–ª–∞—Å–Ω–∏—Ç–∏ arr2 –∑–Ω–∞—á–µ–Ω–Ω—è arr1 (–∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º).
 * - –í–∏–≤–µ—Å—Ç–∏ –æ–±–∏–¥–≤–∞ –º–∞—Å–∏–≤–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–æ —ñ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ arr1.
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ arr1 —ñ arr2 —î –æ–¥–Ω–∏–º —ñ —Ç–∏–º —Å–∞–º–∏–º –º–∞—Å–∏–≤–æ–º (–∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º).
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω—å —É –º–∞—Å–∏–≤–∞—Ö JavaScript.

TODO: Task
const arr1 = [1, 2, 3];
function checkArrayReference() {
}

checkArrayReference(); // –í–∏–≤–æ–¥–∏—Ç—å: arr1: [1, 2, 3], arr2: [1, 2, 3], arr1: [1, 2, 3, 20], arr2: [1, 2, 3, 20], true

TODO: Answer - Var 1 (–∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º —á–µ—Ä–µ–∑ —ñ–Ω–¥–µ–∫—Å)
const arr1 = [1, 2, 3];
function checkArrayReference() {
  const arr2 = arr1;
  console.log('arr1:', arr1);
  console.log('arr2:', arr2);
  arr1[arr1.length] = 20; // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ —ñ–Ω–¥–µ–∫—Å
  console.log('arr1:', arr1);
  console.log('arr2:', arr2);
  console.log(arr1 === arr2);
}

checkArrayReference(); // –í–∏–≤–æ–¥–∏—Ç—å: arr1: [1, 2, 3], arr2: [1, 2, 3], arr1: [1, 2, 3, 20], arr2: [1, 2, 3, 20], true

TODO: Answer - Var 2 (–∑ –º–µ—Ç–æ–¥–æ–º push)
const arr1 = [1, 2, 3];
function checkArrayReference() {
  const arr2 = arr1;
  console.log('arr1:', arr1);
  console.log('arr2:', arr2);
  arr1.push(20); // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ push
  console.log('arr1:', arr1);
  console.log('arr2:', arr2);
  console.log(arr1 === arr2);
}

checkArrayReference(); // –í–∏–≤–æ–¥–∏—Ç—å: arr1: [1, 2, 3], arr2: [1, 2, 3], arr1: [1, 2, 3, 20], arr2: [1, 2, 3, 20], true
*/
/* //! for/for...of (–ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É –∑ –Ω—É–º–µ—Ä–∞—Ü—ñ—î—é)
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ fruits —ñ–∑ —Ñ—Ä—É–∫—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ['üçé', 'üçá', 'üçë', ...]).
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É.
 * - –í–∏–≤–µ—Å—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ "–Ω–æ–º–µ—Ä: –∑–Ω–∞—á–µ–Ω–Ω—è", –¥–µ –Ω–æ–º–µ—Ä –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 1.
 * - –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î, –ª–∏—à–µ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∫–æ–Ω—Å–æ–ª—å.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.

TODO: Task
const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçé', 'üçã'];
function printFruitsNumbered() {
}

printFruitsNumbered(); // –í–∏–≤–æ–¥–∏—Ç—å: 1: üçé, 2: üçá, 3: üçë, 4: üçå, 5: üçé, 6: üçã

TODO: Answer - Var 1 (–∑ for...of)
const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçé', 'üçã'];
function printFruitsNumbered() {
  let fruitNumber = 1; // –ü–æ—á–∏–Ω–∞—î–º–æ –Ω—É–º–µ—Ä–∞—Ü—ñ—é –∑ 1
  for (const fruit of fruits) {
    console.log(`${fruitNumber}: ${fruit}`);
    fruitNumber++; // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
  }
}

printFruitsNumbered(); // –í–∏–≤–æ–¥–∏—Ç—å: 1: üçé, 2: üçá, 3: üçë, 4: üçå, 5: üçé, 6: üçã

TODO: Answer - Var 2 (–∑ for)
const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçé', 'üçã'];
function printFruitsNumbered() {
  for (let i = 0; i < fruits.length; i++) {
    console.log(`${i + 1}: ${fruits[i]}`); // i + 1, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑ 1, –∞ –Ω–µ –∑ 0
  }
}

printFruitsNumbered(); // –í–∏–≤–æ–¥–∏—Ç—å: 1: üçé, 2: üçá, 3: üçë, 4: üçå, 5: üçé, 6: üçã
*/
/* //! –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ values, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ (–¥–æ–≤–∂–∏–Ω—É —ñ —à–∏—Ä–∏–Ω—É), —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '8 11').
 * - –†–æ–∑–¥—ñ–ª–∏—Ç–∏ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –≤ —á–∏—Å–ª–∞ —ñ –∑–Ω–∞–π—Ç–∏ –¥–æ–±—É—Ç–æ–∫ (–ø–ª–æ—â—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞).
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —ñ–∑ —Ä—è–¥–∫–∞ —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π.

TODO: Task
const values = '8 11';
function calculateRectangleArea() {
}

console.log(calculateRectangleArea()); // –í–∏–≤–æ–¥–∏—Ç—å: 88 (8 * 11)

TODO: Answer
const values = '8 11';
function calculateRectangleArea() {
  const sidesArr = values.split(' '); // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤
  const rectangleArea = Number(sidesArr[0]) * Number(sidesArr[1]); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —á–∏—Å–ª–∞ —ñ –º–Ω–æ–∂–∏–º–æ
  return rectangleArea;
}

console.log(calculateRectangleArea()); // –í–∏–≤–æ–¥–∏—Ç—å: 88 (8 * 11)
*/
/* //! for/for...of (–ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤)
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É friends —ñ –≤–∏–≤–µ–¥–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —É –∫–æ–Ω—Å–æ–ª—å.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ friends —ñ–∑ —ñ–º–µ–Ω–∞–º–∏ –¥—Ä—É–∑—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ['Mango', 'Kiwi', 'Poly', 'Ajax']).
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É.
 * - –í–∏–≤–µ—Å—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —É –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å.
 * - –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î, –ª–∏—à–µ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –π–æ–≥–æ –≤–º—ñ—Å—Ç—É.

TODO: Task
const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax'];
function printFriends() {
}

printFriends(); // –í–∏–≤–æ–¥–∏—Ç—å: Mango, Kiwi, Poly, Ajax

TODO: Answer - Var 1 (–∑ for)
const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax'];
function printFriends() {
  console.log('friends:', friends); // –í–∏–≤–æ–¥–∏–º–æ –º–∞—Å–∏–≤ –¥–ª—è –Ω–∞–æ—á–Ω–æ—Å—Ç—ñ
  for (let i = 0; i < friends.length; i++) {
    console.log(friends[i]);
  }
}

printFriends(); // –í–∏–≤–æ–¥–∏—Ç—å: friends: ['Mango', 'Kiwi', 'Poly', 'Ajax'], Mango, Kiwi, Poly, Ajax

TODO: Answer - Var 2 (–∑ for...of)
const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax'];
function printFriends() {
  for (const item of friends) {
    console.log(item);
  }
}

printFriends(); // –í–∏–≤–æ–¥–∏—Ç—å: Mango, Kiwi, Poly, Ajax
*/
/* //! for (–í–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤)
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ–∑ —Ä—è–¥–∫—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö –∫–æ–º–∞–º–∏.
 * - –î–∞–Ω–æ –¥–≤–∞ —Ä—è–¥–∫–∏: names (—ñ–º–µ–Ω–∞) —Ç–∞ phones (—Ç–µ–ª–µ—Ñ–æ–Ω–∏), —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
 * - –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –æ–¥–Ω–∞–∫–æ–≤–∞, —ó—Ö –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —É–∫–∞–∑—É—î –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å.
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–∫–∏ –≤ –º–∞—Å–∏–≤–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é split().
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ–º–µ–Ω —ñ –≤–∏–≤–µ—Å—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–∞—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–∞–Ω–∏—Ö —ñ–∑ —Ä—è–¥–∫—ñ–≤.

TODO: Task
const names = 'Jacob,William,Solomon,Artemis';
const phones = '89001234567,89001112233,890055566377,890055566300';
function printNamesAndPhones() {
}

printNamesAndPhones(); // –í–∏–≤–æ–¥–∏—Ç—å: Jacob - 89001234567, William - 89001112233, Solomon - 890055566377, Artemis - 890055566300

TODO: Answer - Var 1 (–∑ for)
const names = 'Jacob,William,Solomon,Artemis';
const phones = '89001234567,89001112233,890055566377,890055566300';
function printNamesAndPhones() {
  console.log('names:', names);
  console.log('phones:', phones);
  const namesArr = names.split(',');
  const phonesArr = phones.split(',');
  console.log('namesArr:', namesArr);
  console.log('phonesArr:', phonesArr);
  for (let i = 0; i < namesArr.length; i++) {
    console.log(`${namesArr[i]} - ${phonesArr[i]}`);
  }
}

printNamesAndPhones(); // –í–∏–≤–æ–¥–∏—Ç—å: Jacob - 89001234567, William - 89001112233, Solomon - 890055566377, Artemis - 890055566300
*/
/* //! –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏ –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î —Å—É–º—É –≤—Å—ñ—Ö –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ numbers —ñ–∑ —Ü—ñ–ª–∏–º–∏ —á–∏—Å–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, [1, 5, 8, 9, 12, 4, ...]).
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É.
 * - –ó–Ω–∞–π—Ç–∏ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞ (—Ç—ñ, —â–æ –¥—ñ–ª—è—Ç—å—Å—è –Ω–∞ 2 –±–µ–∑ –æ—Å—Ç–∞—á—ñ).
 * - –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —ó—Ö–Ω—é —Å—É–º—É.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —ñ —Ä–æ–±–æ—Ç–∏ –∑ —É–º–æ–≤–∞–º–∏.

TODO: Task
const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];
function sumEvenNumbers() {
}

console.log(sumEvenNumbers()); // –í–∏–≤–æ–¥–∏—Ç—å: 86 (8 + 12 + 4 + 30 + 18 + 14)

TODO: Answer
const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];
function sumEvenNumbers() {
  let total = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞
  for (const num of numbers) { // –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –º–∞—Å–∏–≤
    if (num % 2 === 0) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ
      total += num; // –î–æ–¥–∞—î–º–æ –¥–æ —Å—É–º–∏
    }
  }
  return total; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
}

console.log(sumEvenNumbers()); // –í–∏–≤–æ–¥–∏—Ç—å: 86 (8 + 12 + 4 + 30 + 18 + 14)
*/
/* //! Task #7 split() join() indexOf() for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±—ñ–ª—É. –°–∫—Ä–∏–ø—Ç –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ —Ä—è–¥–∫–∞.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ —ñ–∑ –∫—ñ–ª—å–∫–æ–º–∞ —Å–ª–æ–≤–∞–º–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–º–∏ –ø—Ä–æ–±—ñ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Welcome to the future').
 * - –†–æ–∑–¥—ñ–ª–∏—Ç–∏ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤ —Å–ª—ñ–≤.
 * - –í–∑—è—Ç–∏ –≤—Å—ñ —Å–ª–æ–≤–∞, –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ.
 * - –û–±‚Äô—î–¥–Ω–∞—Ç–∏ —ó—Ö —É –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –±–µ–∑ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —á–∏ –≤ –∫—ñ–Ω—Ü—ñ.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É —Ç–∞ –≤–∏–ª—É—á–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —Ä—è–¥–∫–∞.

TODO: Task
const string = 'Welcome to the future';
function getMiddleWords() {
}

console.log(getMiddleWords()); // –í–∏–≤–æ–¥–∏—Ç—å: to the

TODO: Answer - Var 1
const string = 'Welcome to the future';
function getMiddleWords() {
  const wordsArr = string.split(' '); // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤ —Å–ª—ñ–≤
  let resultStr = '';
  for (let i = 1; i < wordsArr.length - 1; i++) {
    resultStr += ` ${wordsArr[i]}`; // –î–æ–¥–∞—î–º–æ —Å–ª–æ–≤–∞ –∑ –ø—Ä–æ–±—ñ–ª–æ–º
  }
  return resultStr.trim(); // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
}

console.log(getMiddleWords()); // –í–∏–≤–æ–¥–∏—Ç—å: to the

TODO: Answer - Var 2
const string = 'Welcome to the future';
function getMiddleWords() {
  let wordsArr = string.split(' '); // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤ —Å–ª—ñ–≤
  wordsArr = wordsArr.slice(1, wordsArr.length - 1); // –ë–µ—Ä–µ–º–æ —Å–µ—Ä–µ–¥–Ω—ñ —Å–ª–æ–≤–∞
  return wordsArr.join(' '); // –û–±‚Äô—î–¥–Ω—É—î–º–æ –∑ –ø—Ä–æ–±—ñ–ª–æ–º
}

console.log(getMiddleWords()); // –í–∏–≤–æ–¥–∏—Ç—å: to the

TODO: Answer - Var 3
const string = 'Welcome to the future';
function getMiddleWords() {
  const firstSpace = string.indexOf(' '); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –ø—Ä–æ–±—ñ–ª
  const lastSpace = string.lastIndexOf(' '); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø—Ä–æ–±—ñ–ª
  return string.slice(firstSpace + 1, lastSpace); // –í–∏—Ç—è–≥—É—î–º–æ —Å–µ—Ä–µ–¥–∏–Ω—É
}

console.log(getMiddleWords()); // –í–∏–≤–æ–¥–∏—Ç—å: to the
*/
/* //! Task #8 for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —ó—ó –≤ –∫–æ–Ω—Å–æ–ª—å.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'Welcome to the future').
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ —Ä—è–¥–∫–∞ –≤ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.
 * - –°–∫–ª–∞—Å—Ç–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —ñ–∑ —Å–∏–º–≤–æ–ª—ñ–≤ —É –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç–µ–∫—Å—Ç–æ–º —ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∑–µ—Ä–∫–∞–ª—å–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤.

TODO: Task
const string = 'Welcome to the future';
function reverseString() {
}

console.log(reverseString()); // –í–∏–≤–æ–¥–∏—Ç—å: erutuf eht ot emocleW

TODO: Answer - Var 1
const string = 'Welcome to the future';
function reverseString() {
  const lettersArr = string.split(''); // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –º–∞—Å–∏–≤ —Å–∏–º–≤–æ–ª—ñ–≤
  let reversedStr = '';
  for (let i = lettersArr.length - 1; i >= 0; i--) {
    reversedStr += lettersArr[i]; // –î–æ–¥–∞—î–º–æ —Å–∏–º–≤–æ–ª–∏ –≤ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
  }
  return reversedStr;
}

console.log(reverseString()); // –í–∏–≤–æ–¥–∏—Ç—å: erutuf eht ot emocleW

TODO: Answer - Var 2
const string = 'Welcome to the future';
function reverseString() {
  let reversedStr = '';
  for (let i = string.length - 1; i >= 0; i--) {
    reversedStr += string[i]; // –ë–µ—Ä–µ–º–æ —Å–∏–º–≤–æ–ª–∏ –Ω–∞–ø—Ä—è–º—É —ñ–∑ —Ä—è–¥–∫–∞
  }
  return reversedStr;
}

console.log(reverseString()); // –í–∏–≤–æ–¥–∏—Ç—å: erutuf eht ot emocleW
*/
/* //! Task #9 for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, [17, -10, 94, -30, 1, 23, -20]).
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É.
 * - –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ, –ø–æ—Ä—ñ–≤–Ω—é—é—á–∏ –µ–ª–µ–º–µ–Ω—Ç–∏.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.

TODO: Task
const values = [17, -10, 94, -30, 1, 23, -20];
function findMinNumber() {
}

console.log(findMinNumber()); // –í–∏–≤–æ–¥–∏—Ç—å: -30

TODO: Answer
const values = [17, -10, 94, -30, 1, 23, -20];
function findMinNumber() {
  let min = values[0]; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  for (let i = 1; i < values.length; i++) {
    if (values[i] < min) { // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—à–µ, –æ–Ω–æ–≤–ª—é—î–º–æ min
      min = values[i];
    }
  }
  return min;
}

console.log(findMinNumber()); // –í–∏–≤–æ–¥–∏—Ç—å: -30
*/
/* //! Task #10 for()
TODO: –£ –Ω–∞—Å —î –¥–µ–∫—ñ–ª—å–∫–∞ –º–∞—Å–∏–≤—ñ–≤ —ñ–∑ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —ñ–∑ —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞—Ä–ø–ª–∞—Ç.
 * - –î–∞–Ω–æ –¥–≤–∞ –º–∞—Å–∏–≤–∏ –∑–∞—Ä–ø–ª–∞—Ç: managerSalaries —ñ developersSalaries.
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–±–æ—Ö –º–∞—Å–∏–≤—ñ–≤.
 * - –î–æ–¥–∞—Ç–∏ –∫–æ–∂–Ω—É –∑–∞—Ä–ø–ª–∞—Ç—É –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ –∫—ñ–ª—å–∫–æ—Ö –¥–∂–µ—Ä–µ–ª.

TODO: Task
const managerSalaries = [100, 150, 250, 400, 500];
const developersSalaries = [800, 1500, 4000];
function calculateTotalSalaries() {
}

console.log(calculateTotalSalaries()); // –í–∏–≤–æ–¥–∏—Ç—å: 7700 (100 + 150 + 250 + 400 + 500 + 800 + 1500 + 4000)

TODO: Answer
const managerSalaries = [100, 150, 250, 400, 500];
const developersSalaries = [800, 1500, 4000];
function calculateTotalSalaries() {
  let total = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞
  for (const salary of managerSalaries) {
    total += salary; // –î–æ–¥–∞—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
  }
  for (const salary of developersSalaries) {
    total += salary; // –î–æ–¥–∞—î–º–æ –∑–∞—Ä–ø–ª–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤
  }
  return total;
}

console.log(calculateTotalSalaries()); // –í–∏–≤–æ–¥–∏—Ç—å: 7700 (100 + 150 + 250 + 400 + 500 + 800 + 1500 + 4000)
*/
/* //! Task #11 push()
TODO: –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ styles –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´–î–∂–∞–∑¬ª —Ç–∞ ¬´–ë–ª—é–∑¬ª. –î–æ–¥–∞–π—Ç–µ "–†–æ–∫-–Ω-—Ä–æ–ª" –≤ –∫—ñ–Ω–µ—Ü—å. –ó–∞–º—ñ–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è "–ë–ª—é–∑" –Ω–∞ "–ö–ª–∞—Å–∏–∫–∞". –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É —ñ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å. –í—Å—Ç–∞–≤—Ç–µ ¬´–†–µ–ø¬ª —ñ ¬´–†–µ–≥–≥—ñ¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É.
 * - –î–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —ñ–∑ –¥–≤–æ–º–∞ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏.
 * - –í–∏–∫–æ–Ω–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó: –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –∑–∞–º—ñ–Ω–∞, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –≤—Å—Ç–∞–≤–∫–∞.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –∑–º—ñ–Ω–µ–Ω–∏–π –º–∞—Å–∏–≤.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Å–∏–≤–∞–º–∏ —Ç–∞ —ó—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.

TODO: Task
function modifyStyles() {
  const styles = ['–î–∂–∞–∑', '–ë–ª—é–∑'];
}

console.log(modifyStyles()); // –í–∏–≤–æ–¥–∏—Ç—å: ["–†–µ–ø", "–†–µ–≥–≥—ñ", "–ö–ª–∞—Å–∏–∫–∞", "–†–æ–∫-–Ω-—Ä–æ–ª"]

TODO: Answer
function modifyStyles() {
  const styles = ['–î–∂–∞–∑', '–ë–ª—é–∑'];
  styles.push('–†–æ–∫-–Ω-—Ä–æ–ª'); // –î–æ–¥–∞—î–º–æ –≤ –∫—ñ–Ω–µ—Ü—å
  const index = styles.indexOf('–ë–ª—é–∑'); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å "–ë–ª—é–∑"
  styles[index] = '–ö–ª–∞—Å–∏–∫–∞'; // –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ "–ö–ª–∞—Å–∏–∫–∞"
  const deletedElement = styles.shift(); // –í–∏–¥–∞–ª—è—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
  console.log(deletedElement); // –í–∏–≤–æ–¥–∏—Ç—å: –î–∂–∞–∑
  styles.unshift('–†–µ–ø', '–†–µ–≥–≥—ñ'); // –î–æ–¥–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
  return styles;
}

console.log(modifyStyles()); // –í–∏–≤–æ–¥–∏—Ç—å: ["–†–µ–ø", "–†–µ–≥–≥—ñ", "–ö–ª–∞—Å–∏–∫–∞", "–†–æ–∫-–Ω-—Ä–æ–ª"]
*/
/* //! Task #12 push() function()
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é multiples(m, n), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –ø–µ—Ä—à–∏—Ö m –∫—Ä–∞—Ç–Ω–∏—Ö –¥—ñ–π—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞ n. –í–≤–∞–∂–∞—Ç–∏, —â–æ m - –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–µ —á–∏—Å–ª–æ.
 * - –î–∞–Ω–æ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: m (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–∞—Ç–Ω–∏—Ö) —ñ n (—á–∏—Å–ª–æ).
 * - –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ–∑ –ø–µ—Ä—à–∏—Ö m –∫—Ä–∞—Ç–Ω–∏—Ö —á–∏—Å–ª–∞ n.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Å–∏–≤.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π —á–∏—Å–µ–ª.

TODO: Task
function multiples(m, n) {
}

console.log(multiples(3, 5)); // –í–∏–≤–æ–¥–∏—Ç—å: [5, 10, 15]

TODO: Answer - Var 1
function multiples(m, n) {
  const arr = [];
  let startNum = n; // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
  for (let i = 0; i < m; i += 1) {
    arr.push(startNum); // –î–æ–¥–∞—î–º–æ –∫—Ä–∞—Ç–Ω–µ
    startNum += n; // –ó–±—ñ–ª—å—à—É—î–º–æ –Ω–∞ n
  }
  return arr;
}

console.log(multiples(3, 5)); // –í–∏–≤–æ–¥–∏—Ç—å: [5, 10, 15]

TODO: Answer - Var 2
function multiples(m, n) {
  const arr = [];
  for (let i = 1; i <= m; i += 1) {
    arr.push(n * i); // –î–æ–¥–∞—î–º–æ n –ø–æ–º–Ω–æ–∂–µ–Ω–µ –Ω–∞ i
  }
  return arr;
}

console.log(multiples(3, 5)); // –í–∏–≤–æ–¥–∏—Ç—å: [5, 10, 15]
*/
/* //! Task #13 for() split()
TODO: –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫, —â–æ –º—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏, –≤ –º–∞—Å–∏–≤ —Å–ª—ñ–≤ —ñ –≤–∏–≤–µ—Å—Ç–∏ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É for –∞–±–æ for..of.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ —ñ–∑ —Å–ª–æ–≤–∞–º–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–º–∏ –∫–æ–º–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'HTML, JavaScript, CSS, React').
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ —É –º–∞—Å–∏–≤ —Å–ª—ñ–≤.
 * - –í–∏–≤–µ—Å—Ç–∏ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω—Å–æ–ª—å –æ–∫—Ä–µ–º–æ.
 * - –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏, –ª–∏—à–µ –≤–∏–≤–æ–¥–∏—Ç–∏.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–ø–∏—Å–∫—ñ–≤ —É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ.

TODO: Task
const str = 'HTML, JavaScript, CSS, React';
function printWords() {
}

printWords(); // –í–∏–≤–æ–¥–∏—Ç—å: HTML, JavaScript, CSS, React

TODO: Answer - Var 1
const str = 'HTML, JavaScript, CSS, React';
function printWords() {
  const array = str.split(','); // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –º–∞—Å–∏–≤
  for (let index = 0; index < array.length; index++) {
    console.log(array[index].trim()); // –í–∏–≤–æ–¥–∏–º–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ, –≤–∏–¥–∞–ª—è—é—á–∏ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
  }
}

printWords(); // –í–∏–≤–æ–¥–∏—Ç—å: HTML, JavaScript, CSS, React

TODO: Answer - Var 2
const str = 'HTML, JavaScript, CSS, React';
function printWords() {
  const array = str.split(','); // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –º–∞—Å–∏–≤
  for (const element of array) {
    console.log(element.trim()); // –í–∏–≤–æ–¥–∏–º–æ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ, –≤–∏–¥–∞–ª—è—é—á–∏ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
  }
}

printWords(); // –í–∏–≤–æ–¥–∏—Ç—å: HTML, JavaScript, CSS, React
*/
/* //! Task #14 split() join()
TODO: –ü–æ—Ä–∞—Ö—É–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —É —Ä—è–¥–∫—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–µ—Ç–æ–¥–∏ –º–∞—Å–∏–≤—ñ–≤ —ñ —Å—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –¥–µ—Ñ—ñ—Å–∞–º–∏ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ —ñ–∑ —Å–ª–æ–≤–∞–º–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–º–∏ –ø—Ä–æ–±—ñ–ª–∞–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'JavaScript is a popular programming language').
 * - –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤.
 * - –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —ñ–∑ –¥–µ—Ñ—ñ—Å–∞–º–∏ –∑–∞–º—ñ—Å—Ç—å –ø—Ä–æ–±—ñ–ª—ñ–≤ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –æ–±‚Äô—î–∫—Ç —ñ–∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é —Å–ª—ñ–≤ —ñ –Ω–æ–≤–∏–º —Ä—è–¥–∫–æ–º.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É.

TODO: Task
const message = 'JavaScript is a popular programming language';
function transformString() {
}

console.log(transformString()); // –í–∏–≤–æ–¥–∏—Ç—å: { count: 7, transformed: 'javascript-is-a-popular-programming-language' }

TODO: Answer
const message = 'JavaScript is a popular programming language';
function transformString() {
  const words = message.split(' '); // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –º–∞—Å–∏–≤ —Å–ª—ñ–≤
  const count = words.length; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤
  const transformed = words.join('-').toLowerCase(); // –û–±‚Äô—î–¥–Ω—É—î–º–æ –∑ –¥–µ—Ñ—ñ—Å–∞–º–∏ —ñ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä
  return { count, transformed }; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ–±‚Äô—î–∫—Ç
}

console.log(transformString()); // –í–∏–≤–æ–¥–∏—Ç—å: { count: 7, transformed: 'javascript-is-a-popular-programming-language' }
*/
/* //! Task #15 for() if() else{}
TODO: –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –∑–∞–º—ñ–Ω—é—î —Ä–µ–≥—ñ—Å—Ç—Ä –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –≤ —Ä—è–¥–∫—É –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π. –ù–∞–ø—Ä–∏–∫–ª–∞–¥ 'JavaScript' –ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 'jAVAsCRIPT'.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'JavaScript').
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –∫–æ–∂–µ–Ω —Å–∏–º–≤–æ–ª —Ä—è–¥–∫–∞.
 * - –ó–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ—Å—Ç—Ä: –≤–µ–ª–∏–∫—ñ –Ω–∞ –º–∞–ª—ñ, –º–∞–ª—ñ –Ω–∞ –≤–µ–ª–∏–∫—ñ.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç—É.

TODO: Task
const str = 'JavaScript';
function swapCase() {
}

console.log(swapCase()); // –í–∏–≤–æ–¥–∏—Ç—å: jAVAsCRIPT

TODO: Answer - Var 1
const str = 'JavaScript';
function swapCase() {
  let updateString = '';
  for (let i = 0; i < str.length; i++) {
    if (str[i] === str[i].toUpperCase()) {
      updateString += str[i].toLowerCase(); // –í–µ–ª–∏–∫—ñ –Ω–∞ –º–∞–ª—ñ
    } else {
      updateString += str[i].toUpperCase(); // –ú–∞–ª—ñ –Ω–∞ –≤–µ–ª–∏–∫—ñ
    }
  }
  return updateString;
}

console.log(swapCase()); // –í–∏–≤–æ–¥–∏—Ç—å: jAVAsCRIPT

TODO: Answer - Var 2
const str = 'JavaScript';
function swapCase() {
  const array = str.split(''); // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ –º–∞—Å–∏–≤ —Å–∏–º–≤–æ–ª—ñ–≤
  const updateArray = [];
  for (let i = 0; i < array.length; i++) {
    if (array[i] === array[i].toUpperCase()) {
      updateArray.push(array[i].toLowerCase()); // –í–µ–ª–∏–∫—ñ –Ω–∞ –º–∞–ª—ñ
    } else {
      updateArray.push(array[i].toUpperCase()); // –ú–∞–ª—ñ –Ω–∞ –≤–µ–ª–∏–∫—ñ
    }
  }
  return updateArray.join(''); // –û–±‚Äô—î–¥–Ω—É—î–º–æ –Ω–∞–∑–∞–¥ —É —Ä—è–¥–æ–∫
}

console.log(swapCase()); // –í–∏–≤–æ–¥–∏—Ç—å: jAVAsCRIPT
*/
/* //! Task #16 indexOf()
TODO: –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É, —â–æ –º—ñ—Å—Ç—è—Ç—å –∑–∞–¥–∞–Ω—É –ø—ñ–¥—Å—Ç—Ä–æ–∫—É, —Ç–∞ –æ–±'—î–¥–Ω–∞—Ç–∏ —ó—Ö —É –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –ø—ñ—Å–ª—è —á–æ–≥–æ –≤–∏–≤–µ—Å—Ç–∏ —É –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É substring: ...". –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –∫–æ–º–∞–º–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∞–º–∏.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ —Å–ª—ñ–≤ —ñ –ø—ñ–¥—Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ—à—É–∫—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'S').
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É.
 * - –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —ñ–∑ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
 * - –í–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.

TODO: Task
const wordsArray = ['JavaScript', 'HTML', 'CSS', 'React'];
const substring = 'S';
function findSubstringElements() {
}

findSubstringElements(); // –í–∏–≤–æ–¥–∏—Ç—å: –ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É S: JavaScript, CSS

TODO: Answer
const wordsArray = ['JavaScript', 'HTML', 'CSS', 'React'];
const substring = 'S';
function findSubstringElements() {
  const array = [];
  for (const str of wordsArray) {
    if (str.includes(substring)) { // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫–∏
      array.push(str); // –î–æ–¥–∞—î–º–æ –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
    }
  }
  console.log(`–ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É ${substring}: ${array.join(', ')}`);
}

findSubstringElements(); // –í–∏–≤–æ–¥–∏—Ç—å: –ú–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –º—ñ—Å—Ç—è—Ç—å –ø—ñ–¥—Å—Ç—Ä–æ–∫—É S: JavaScript, CSS
*/
/* //! Task #17 for() if() else{}
TODO: –°—Ç–≤–æ—Ä–∏ 2 –º–∞—Å–∏–≤–∏ —á–∏—Å–µ–ª. –û–±‚Äô—î–¥–Ω–∞–π —ó—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É –º–∞—Å–∏–≤—É. –°—Ç–≤–æ—Ä–∏ –Ω–æ–≤—ñ –º–∞—Å–∏–≤–∏ —ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É for –∞–±–æ for..of, —É –ø–µ—Ä—à–∏–π –º–∞—Å–∏–≤ –∑–±–µ—Ä–∏ —É—Å—ñ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞, –∞ –≤ –¥—Ä—É–≥–∏–π —É—Å—ñ –Ω–µ–ø–∞—Ä–Ω—ñ —ñ –≤–∏–≤–µ–¥–∏ —ó—Ö —É –∫–æ–Ω—Å–æ–ª—å.
 * - –î–∞–Ω–æ –¥–≤–∞ –º–∞—Å–∏–≤–∏ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, [1, 2, 3, 5, 4] —ñ [10, 21, 33, 55, 44]).
 * - –û–±‚Äô—î–¥–Ω–∞—Ç–∏ –º–∞—Å–∏–≤–∏ –≤ –æ–¥–∏–Ω.
 * - –†–æ–∑–¥—ñ–ª–∏—Ç–∏ —á–∏—Å–ª–∞: –ø–∞—Ä–Ω—ñ –≤ –æ–¥–∏–Ω –º–∞—Å–∏–≤, –Ω–µ–ø–∞—Ä–Ω—ñ –≤ —ñ–Ω—à–∏–π.
 * - –í–∏–≤–µ—Å—Ç–∏ –æ–±–∏–¥–≤–∞ –º–∞—Å–∏–≤–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑–∞ —É–º–æ–≤–æ—é.

TODO: Task
const firstArray = [1, 2, 3, 5, 4];
const secondArray = [10, 21, 33, 55, 44];
function separateNumbers() {
}

separateNumbers(); // –í–∏–≤–æ–¥–∏—Ç—å: [2, 4, 10, 44], [1, 3, 5, 21, 33, 55]

TODO: Answer
const firstArray = [1, 2, 3, 5, 4];
const secondArray = [10, 21, 33, 55, 44];
function separateNumbers() {
  const newArray = firstArray.concat(secondArray); // –û–±‚Äô—î–¥–Ω—É—î–º–æ –º–∞—Å–∏–≤–∏
  const evenNumbers = [];
  const oddNumbers = [];
  for (const element of newArray) {
    if (element % 2 === 0) {
      evenNumbers.push(element); // –ü–∞—Ä–Ω—ñ —á–∏—Å–ª–∞
    } else {
      oddNumbers.push(element); // –ù–µ–ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞
    }
  }
  console.log(evenNumbers);
  console.log(oddNumbers);
}

separateNumbers(); // –í–∏–≤–æ–¥–∏—Ç—å: [2, 4, 10, 44], [1, 3, 5, 21, 33, 55]
*/
/* //! Task #18 for() if() function()
TODO: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findSmallerNumber(numbers), —è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ. –î–æ–¥–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª –∞–±–æ —ñ–Ω—à–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, [5, '-13', -7, -11, 'a']).
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —î –º–∞—Å–∏–≤–æ–º.
 * - –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –ø–æ—à—É–∫—É –º—ñ–Ω—ñ–º—É–º—É.

TODO: Task
function findSmallerNumber(numbers) {
}

console.log(findSmallerNumber(0)); // –í–∏–≤–æ–¥–∏—Ç—å: number is not Array
console.log(findSmallerNumber([5, -13, -7, -11])); // –í–∏–≤–æ–¥–∏—Ç—å: -13

TODO: Answer - Var 1
function findSmallerNumber(numbers) {
  if (!Array.isArray(numbers)) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞—Å–∏–≤
    return 'number is not Array';
  }
  let smallNumber = numbers[0]; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –ø–µ—Ä—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
  for (let i = 0; i < numbers.length; i++) {
    if (smallNumber > numbers[i]) { // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—à–µ, –æ–Ω–æ–≤–ª—é—î–º–æ
      smallNumber = numbers[i];
    }
  }
  return smallNumber;
}

console.log(findSmallerNumber(0)); // –í–∏–≤–æ–¥–∏—Ç—å: number is not Array
console.log(findSmallerNumber([5, -13, -7, -11])); // –í–∏–≤–æ–¥–∏—Ç—å: -13

TODO: Answer - Var 2
function findSmallerNumber(numbers) {
  if (!Array.isArray(numbers)) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º–∞—Å–∏–≤
    return 'number is not Array';
  }
  let smallNumber = numbers[0];
  for (let number of numbers) {
    if (typeof number !== 'number') { // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–µ—á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
      continue;
    }
    if (smallNumber > number) { // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–µ –º–µ–Ω—à–µ, –æ–Ω–æ–≤–ª—é—î–º–æ
      smallNumber = number;
    }
  }
  return smallNumber;
}

console.log(findSmallerNumber(0)); // –í–∏–≤–æ–¥–∏—Ç—å: number is not Array
console.log(findSmallerNumber([5, '-13', -7, -11, 'a'])); // –í–∏–≤–æ–¥–∏—Ç—å: -11
*/
/* //! Task #19 function()
TODO: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é min(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a, b. –ü–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º—É—î —á–∏—Å–ª–∞.
 * - –î–∞–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ a —ñ b.
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –æ–±–∏–¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —î —á–∏—Å–ª–∞–º–∏.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∏—Å–µ–ª —ñ–∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é.

TODO: Task
function min(a, b) {
}

console.log(min(5, 10)); // –í–∏–≤–æ–¥–∏—Ç—å: 5
console.log(min('5', 10)); // –í–∏–≤–æ–¥–∏—Ç—å: One of parameters is not a number

TODO: Answer
function min(a, b) {
  return typeof a === 'number' && typeof b === 'number' // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∏–ø—ñ–≤
    ? Math.min(a, b) // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—à–µ —á–∏—Å–ª–æ
    : 'One of parameters is not a number'; // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
}

console.log(min(5, 10)); // –í–∏–≤–æ–¥–∏—Ç—å: 5
console.log(min('5', 10)); // –í–∏–≤–æ–¥–∏—Ç—å: One of parameters is not a number
*/
/* //! Task #20 –ü–∞–ª—ñ–Ω–¥—Ä–æ–º
TODO: –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ä–µ—á–µ–Ω–Ω—è –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è').
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ —É –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä —ñ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏.
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ä—è–¥–æ–∫ —á–∏—Ç–∞—î—Ç—å—Å—è –æ–¥–Ω–∞–∫–æ–≤–æ –≤ –æ–±–æ—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ true, —è–∫—â–æ —Ü–µ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º, —ñ false, —è–∫—â–æ –Ω—ñ.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–µ–∫—Å—Ç—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–º–µ—Ç—Ä—ñ—ó.

TODO: Task
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
function isPalindrom() {
}

console.log(isPalindrom()); // –í–∏–≤–æ–¥–∏—Ç—å: true

TODO: Answer
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
function isPalindrom() {
  const updateString = str.toLowerCase().replaceAll(' ', ''); // –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –Ω–∏–∂–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä —ñ –≤–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
  const array = [];
  for (let i = 0; i < updateString.length; i++) {
    array.push(updateString[updateString.length - 1 - i]); // –§–æ—Ä–º—É—î–º–æ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π —Ä—è–¥–æ–∫
  }
  let reversedString = array.join('');
  return updateString === reversedString; // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ
}

console.log(isPalindrom()); // –í–∏–≤–æ–¥–∏—Ç—å: true
*/
/* //! Task #21 function() for() if()
TODO: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –ø–µ—Ä—à–æ–≥–æ –º–∞—Å–∏–≤—É —î –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥—Ä—É–≥–æ–≥–æ –º–∞—Å–∏–≤—É.
 * - –î–∞–Ω–æ –¥–≤–∞ –º–∞—Å–∏–≤–∏ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, [11, 9, 3] —ñ [121, 81, 9]).
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –ø–µ—Ä—à–æ–≥–æ –º–∞—Å–∏–≤—É, –ø—ñ–¥–Ω–µ—Å–µ–Ω–∏–π –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –µ–ª–µ–º–µ–Ω—Ç—É –¥—Ä—É–≥–æ–≥–æ –º–∞—Å–∏–≤—É.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ true, —è–∫—â–æ –º–∞—Å–∏–≤–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —É–º–æ–≤—ñ, —ñ false, —è–∫—â–æ –Ω—ñ.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–∑ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–º–∏ –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏.

TODO: Task
const numbers = [11, 9, 3];
const numbers2 = [121, 81, 9];
function checkSquares() {
}

console.log(checkSquares()); // –í–∏–≤–æ–¥–∏—Ç—å: true

TODO: Answer - Var 1
const numbers = [11, 9, 3];
const numbers2 = [121, 81, 9];
function checkSquares() {
  if (numbers.length !== numbers2.length) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    return false;
  }
  const powNumbers = [];
  for (let i = 0; i < numbers.length; i++) {
    powNumbers.push(numbers[i] * numbers[i]); // –ü—ñ–¥–Ω–æ—Å–∏–º–æ –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
  }
  for (let i = 0; i < numbers.length; i++) {
    if (powNumbers[i] !== numbers2[i]) { // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ
      return false;
    }
  }
  return true;
}

console.log(checkSquares()); // –í–∏–≤–æ–¥–∏—Ç—å: true

TODO: Answer - Var 2
const numbers = [11, 9, 3];
const numbers2 = [121, 81, 9];
function checkSquares() {
  if (numbers.length !== numbers2.length) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏
    return false;
  }
  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] !== Math.sqrt(numbers2[i])) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–µ–Ω—è
      return false;
    }
  }
  return true;
}

console.log(checkSquares()); // –í–∏–≤–æ–¥–∏—Ç—å: true
*/
/* //! Task #22 function() for()
TODO: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ —Å—É–º—É–≤–∞—Ç–∏–º–µ —Å—É—Å—ñ–¥–Ω—ñ —á–∏—Å–ª–∞ —ñ –¥–æ–¥–∞—Å—Ç—å —ó—Ö —É –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, [22, 11, 34, 5, 12]).
 * - –°–∫–ª–∞—Å—Ç–∏ —Å—É–º–∏ —Å—É—Å—ñ–¥–Ω—ñ—Ö —á–∏—Å–µ–ª (–ø–µ—Ä—à–µ –∑ –¥—Ä—É–≥–∏–º, –¥—Ä—É–≥–µ –∑ —Ç—Ä–µ—Ç—ñ–º —Ç–æ—â–æ).
 * - –î–æ–¥–∞—Ç–∏ —Å—É–º–∏ –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Å–∏–≤ —Å—É–º.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π —á–∏—Å–µ–ª.

TODO: Task
const someArr = [22, 11, 34, 5, 12];
function sumNeighbors() {
}

console.log(sumNeighbors()); // –í–∏–≤–æ–¥–∏—Ç—å: [33, 45, 39, 17]

TODO: Answer - Var 1
const someArr = [22, 11, 34, 5, 12];
function sumNeighbors() {
  const sum = [];
  for (let i = 0; i < someArr.length - 1; i++) {
    sum.push(someArr[i] + someArr[i + 1]); // –°—É–º–∞ —Å—É—Å—ñ–¥–Ω—ñ—Ö —á–∏—Å–µ–ª
  }
  return sum;
}

console.log(sumNeighbors()); // –í–∏–≤–æ–¥–∏—Ç—å: [33, 45, 39, 17]
*/
/* //! Task #23 length() ? :
TODO: –£ –∫–æ–¥—ñ –≤–∂–µ —î –∑–º—ñ–Ω–Ω–∞ arr, —è–∫–∞ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –∑–º—ñ–Ω–Ω–æ—ó arr, —è–∫—â–æ –≤–æ–Ω–æ —î. –Ø–∫—â–æ —Ç–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–∞—Å–∏–≤—ñ –Ω–µ–º–∞—î, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–≤–µ—Å—Ç–∏ null.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ arr —ñ–∑ —á–∏—Å–ª–∞–º–∏.
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î –≤ –º–∞—Å–∏–≤—ñ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –¥–≤–∞ –µ–ª–µ–º–µ–Ω—Ç–∏.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –∞–±–æ null.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É –∑ —É–º–æ–≤–æ—é.

TODO: Task
const arr = [35, 9, -25, 0];
function getPenultimate() {
}

console.log(getPenultimate()); // –í–∏–≤–æ–¥–∏—Ç—å: -25

TODO: Answer
const arr = [35, 9, -25, 0];
function getPenultimate() {
  return arr.length >= 2 ? arr[arr.length - 2] : null; // –£–º–æ–≤–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
}

console.log(getPenultimate()); // –í–∏–≤–æ–¥–∏—Ç—å: -25
*/
/* //! Task #24 for() of() reduce()
TODO: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ —á–∏—Å–µ–ª —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É —á–∏—Å–µ–ª. –ß–∏—Å–ª–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏ —á–∏ –Ω–µ—Ü—ñ–ª–∏–º–∏. –Ø–∫—â–æ –º–∞—Å–∏–≤ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —á–∏—Å–µ–ª, —Å–ª—ñ–¥ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ 0.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, [1, 5.2, 4, 0, -1]).
 * - –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ 0, —è–∫—â–æ –º–∞—Å–∏–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—É–º—É —á–∏—Å–µ–ª.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ø—ñ–¥—Å—É–º–æ–≤—É–≤–∞–Ω–Ω—è —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.

TODO: Task
function sum(numbers) {
}

console.log(sum([1, 5.2, 4, 0, -1])); // –í–∏–≤–æ–¥–∏—Ç—å: 9.2

TODO: Answer - Var 1
function sum(numbers) {
  let total = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞
  for (let num of numbers) {
    total += num; // –î–æ–¥–∞—î–º–æ –∫–æ–∂–Ω–µ —á–∏—Å–ª–æ
  }
  return total;
}

console.log(sum([1, 5.2, 4, 0, -1])); // –í–∏–≤–æ–¥–∏—Ç—å: 9.2

TODO: Answer - Var 2
function sum(numbers) {
  return numbers.reduce((acc, num) => acc + num, 0); // –°—É–º–∞ —á–µ—Ä–µ–∑ reduce
}

console.log(sum([1, 5.2, 4, 0, -1])); // –í–∏–≤–æ–¥–∏—Ç—å: 9.2
*/
/* //! Task #25 function() for() of() –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤
TODO: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é add –¥–ª—è —Å–∫–ª–∞–¥–∞–Ω–Ω—è –¥–æ–≤—ñ–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (—á–∏—Å–µ–ª).
 * - –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.
 * - –°–∫–ª–∞—Å—Ç–∏ –≤—Å—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –≤ —Å—É–º—É.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤–∞–º–∏ arguments.

TODO: Task
function add() {
}

console.log(add(1, 2, 3)); // –í–∏–≤–æ–¥–∏—Ç—å: 6

TODO: Answer
function add() {
  let total = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞
  for (const arg of arguments) { // –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤
    total += arg; // –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç
  }
  return total;
}

console.log(add(1, 2, 3)); // –í–∏–≤–æ–¥–∏—Ç—å: 6
*/
/* //! Task #26 function() for() of() –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤
TODO: –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calculateAverage(), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–ª–æ–≤–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ.
 * - –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î –¥–æ–≤—ñ–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.
 * - –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
 * - –†–æ–∑–¥—ñ–ª–∏—Ç–∏ —Å—É–º—É –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å —ñ–∑ –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤–∞–º–∏.

TODO: Task
function calculateAverage() {
}

console.log(calculateAverage(1, 2, 3, 4)); // –í–∏–≤–æ–¥–∏—Ç—å: 2.5

TODO: Answer
function calculateAverage() {
  let total = 0; // –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Å—É–º–∞
  for (const arg of arguments) { // –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤
    total += arg; // –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç
  }
  return total / arguments.length; // –î—ñ–ª–∏–º–æ –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
}

console.log(calculateAverage(1, 2, 3, 4)); // –í–∏–≤–æ–¥–∏—Ç—å: 2.5
*/
/* //! Task #27 function() split()
TODO: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ dimensions —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫ dimensions —ñ–∑ –¥–≤–æ–º–∞ —á–∏—Å–ª–∞–º–∏, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–º–∏ –ø—Ä–æ–±—ñ–ª–æ–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '8 11').
 * - –†–æ–∑–¥—ñ–ª–∏—Ç–∏ —Ä—è–¥–æ–∫ –Ω–∞ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª.
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤ —á–∏—Å–ª–∞ —ñ –∑–Ω–∞–π—Ç–∏ –¥–æ–±—É—Ç–æ–∫.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –ø–ª–æ—â—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —á–∏—Å–ª–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö —ñ–∑ —Ä—è–¥–∫–∞.

TODO: Task
function getRectArea(dimensions) {
}

console.log(getRectArea('8 11')); // –í–∏–≤–æ–¥–∏—Ç—å: 88

TODO: Answer
function getRectArea(dimensions) {
  const sidesArr = dimensions.split(' '); // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫
  return Number(sidesArr[0]) * Number(sidesArr[1]); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —á–∏—Å–ª–∞ —ñ –º–Ω–æ–∂–∏–º–æ
}

console.log(getRectArea('8 11')); // –í–∏–≤–æ–¥–∏—Ç—å: 88
*/
/* //! Task #28 function() for()
TODO: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –æ—Ç—Ä–∏–º—É—î –º–∞—Å–∏–≤ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ü–∏–∫–ª, —è–∫–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –±—É–¥–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–æ–º–µ—Ä –µ–ª–µ–º–µ–Ω—Ç–∞> - <–∑–Ω–∞—á–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞>. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
 * - –î–∞–Ω–æ –º–∞—Å–∏–≤ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ['Mango', 'Poly', 'Ajax']).
 * - –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ —ñ –≤–∏–≤–µ—Å—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —ñ–∑ –Ω–æ–º–µ—Ä–æ–º, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 1.
 * - –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏, –ª–∏—à–µ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤.

TODO: Task
function logItems(items) {
}

logItems(['Mango', 'Poly', 'Ajax']); // –í–∏–≤–æ–¥–∏—Ç—å: 1 - Mango, 2 - Poly, 3 - Ajax

TODO: Answer
function logItems(items) {
  for (let i = 0; i < items.length; i++) {
    console.log(`${i + 1} - ${items[i]}`); // –í–∏–≤–æ–¥–∏–º–æ –Ω–æ–º–µ—Ä —ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  }
}

logItems(['Mango', 'Poly', 'Ajax']); // –í–∏–≤–æ–¥–∏—Ç—å: 1 - Mango, 2 - Poly, 3 - Ajax
*/
/* //! Task #29 function() for() split()
TODO: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é printInfo(names, phones) —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ names —Ç–∞ phones –±—É–¥—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å. –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
 * - –î–∞–Ω–æ –¥–≤–∞ —Ä—è–¥–∫–∏: names —ñ phones, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
 * - –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–∫–∏ –≤ –º–∞—Å–∏–≤–∏.
 * - –í–∏–≤–µ—Å—Ç–∏ –ø–∞—Ä–∏ —ñ–º‚Äô—è-—Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ "—ñ–º‚Äô—è - —Ç–µ–ª–µ—Ñ–æ–Ω".
 * - –ù—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏, –ª–∏—à–µ –≤–∏–≤–æ–¥–∏—Ç–∏.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–∞—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–∞–Ω–∏—Ö.

TODO: Task
function printInfo(names, phones) {
}

printInfo('Jacob,William,Solomon,Artemis', '89001234567,89001112233,890055566377,890055566300'); // –í–∏–≤–æ–¥–∏—Ç—å: Jacob - 89001234567, William - 89001112233, Solomon - 890055566377, Artemis - 890055566300

TODO: Answer
function printInfo(names, phones) {
  names = names.split(','); // –†–æ–∑–¥—ñ–ª—è—î–º–æ —ñ–º–µ–Ω–∞
  phones = phones.split(','); // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∏
  for (let i = 0; i < names.length; i++) {
    console.log(`${names[i]} - ${phones[i]}`); // –í–∏–≤–æ–¥–∏–º–æ –ø–∞—Ä–∏
  }
}

printInfo('Jacob,William,Solomon,Artemis', '89001234567,89001112233,890055566377,890055566300'); // –í–∏–≤–æ–¥–∏—Ç—å: Jacob - 89001234567, William - 89001112233, Solomon - 890055566377, Artemis - 890055566300
*/
/* //! for (–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º—É)
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º, —ñ–≥–Ω–æ—Ä—É—é—á–∏ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ —Ä–µ–≥—ñ—Å—Ç—Ä.
 * - –î–∞–Ω–æ —Ä—è–¥–æ–∫, —è–∫–∏–π –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ª—ñ—Ç–µ—Ä–∏ –≤ —Ä—ñ–∑–Ω–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
 * - –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ä—è–¥–æ–∫ –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É.
 * - –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ —Ä—è–¥–æ–∫ —ñ–∑ –π–æ–≥–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ—é –≤–µ—Ä—Å—ñ—î—é.
 * - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ true, —è–∫—â–æ —Ä—è–¥–æ–∫ —î –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º, —ñ false, —è–∫—â–æ –Ω—ñ.
 * - –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—ñ —Ç–µ–∫—Å—Ç—É.

TODO: Task
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
function isPalindrom(string) {
}

console.log(isPalindrom(str)); // –í–∏–≤–æ–¥–∏—Ç—å: true

TODO: Answer - Var 1 (–∑ —Ü–∏–∫–ª–æ–º –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É)
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
function isPalindrom(string) {
  const newStr = string.replaceAll(' ', '').toLowerCase();
  let reversedString = '';
  for (let i = 0; i < newStr.length; i++) {
    reversedString += newStr[newStr.length - 1 - i];
  }
  console.log(newStr);         // —è–Ω–µ—Å—É–≥—É—Å–µ–Ω—è
  console.log(reversedString); // —è–Ω–µ—Å—É–≥—É—Å–µ–Ω—è
  return newStr === reversedString;
}

console.log(isPalindrom(str)); // –í–∏–≤–æ–¥–∏—Ç—å: true

TODO: Answer - Var 2 (–∑ —Ü–∏–∫–ª–æ–º –≤—ñ–¥ –∫—ñ–Ω—Ü—è)
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
function isPalindrom(string) {
  const newStr = string.replaceAll(' ', '').toLowerCase();
  let reversedString = '';
  for (let i = newStr.length - 1; i >= 0; i--) {
    reversedString += newStr[i];
  }
  console.log(newStr);         // —è–Ω–µ—Å—É–≥—É—Å–µ–Ω—è
  console.log(reversedString); // —è–Ω–µ—Å—É–≥—É—Å–µ–Ω—è
  return newStr === reversedString;
}

console.log(isPalindrom(str)); // –í–∏–≤–æ–¥–∏—Ç—å: true

TODO: Answer - Var 3 (–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –ø–æ–ª–æ–≤–∏–Ω–∏)
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
function isPalindrom(string) {
  const newStr = string.replaceAll(' ', '').toLowerCase();
  for (let i = 0; i < Math.floor(newStr.length / 2); i++) {
    if (newStr[i] !== newStr[newStr.length - 1 - i]) {
      return false;
    }
  }
  return true;
}

console.log(isPalindrom(str)); // –í–∏–≤–æ–¥–∏—Ç—å: true
*/
//#endregion

// #region //?_–û–±'—î–∫—Ç–∏_–¢–µ–æ—Ä–≥—ñ—è?//
/* //! dot notation  
human.mood = "happy";

 const human = {
     name: "Mango",
     hobby: "reading",
     age: 20,
     greet(){
         console.log(`Hello ${human.name}`);
     }
};
human.greet()
*/
/* //! brackets notation
human["mood"] = "happy";

 const human = {
     name: "Mango",
     hobby: "reading",
     age: 20,
     greet(){
         console.log(`Hello ${human.name}`);
     }
};
human.greet()
*/
/* //! compound brackets notation
const userMood = "mood";
human[userMood] = "happy";

 const human = {
     name: "Mango",
     hobby: "reading",
     age: 20,
     greet(){
         console.log(`Hello ${human.name}`);
     }
};
human.greet()
 console.log(human);
*/
/* //! for...in
TODO: –ü–æ—Ä–∞—Ö—É–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤.
const feedbacks = {
  good: 5,
  neutral: 10,
  bad: 3,
};

console.log('feedbacks:', feedbacks);

let totalFeedbacks = 0;

for (const key in feedbacks) {
  totalFeedbacks += feedbacks[key];
}

console.log('totalFeedbacks:', totalFeedbacks);
*/
/* //! Object.keys()
TODO: –ü–æ—Ä–∞—Ö—É–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤.
const feedbacks = {
  good: 5,
  neutral: 10,
  bad: 3,
};

const feedbacksKeys = Object.keys(feedbacks);

let totalFeedbacks = 0;

for (const key of feedbacksKeys) {
  totalFeedbacks += feedbacks[key];
}

console.log('totalFeedbacks:', totalFeedbacks);
*/
/* //! Object.values()
TODO: –ü–æ—Ä–∞—Ö—É–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤.
const feedbacks = {
  good: 5,
  neutral: 10,
  bad: 3,
};

const feedbacksValues = Object.values(feedbacks);

let totalFeedbacks = 0;

for (const value of feedbacksValues) {
  totalFeedbacks += value;
}

console.log(totalFeedbacks);
*/
// #endregion
// #region //?_–û–±'—î–∫—Ç–∏_–ü—Ä–∞–∫—Ç–∏–∫–∞?//
/* //! Task #1
TODO: –ü–æ—à—É–∫ –¥—Ä—É–≥–∞ –ø–æ —ñ–º–µ–Ω—ñ
const friends = [
  { name: 'John', online: true },
  { name: 'Alice', online: false },
  { name: 'Bob', online: true },
  { name: 'Charlie', online: false },
]

console.table(friends)


const findFriendByName = function (allFriends, friendName) {
  for (const friend of allFriends) {
    if (friend.name.toLowerCase() === friendName.toLowerCase()) {
      return friend;
    }
  }
  return `none`
}

console.log(findFriendByName(friends, 'John'));
*/
/* //! Task #2
TODO: –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º–µ–Ω–∞ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤
const friends = [
  { name: 'John', online: true },
  { name: 'Alice', online: false },
  { name: 'Bob', online: true },
  { name: 'Charlie', online: false },
]
const getAllNames = function (allFriends) {
  const allNames = []
  for (const friend of allFriends) {
    allNames.push(friend.name)
  }
  return allNames
}
console.log(getAllNames(friends));
*/
/* //! Task #3
TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º–µ–Ω–∞ –¥—Ä—É–∑—ñ–≤ —è–∫—ñ –æ–Ω–ª–∞–π–Ω

const friends = [
  { name: 'John', online: true },
  { name: 'Alice', online: false },
  { name: 'Bob', online: true },
  { name: 'Charlie', online: false },
]
const getOnlimeFriends = function (allFriends) {
  const friendsNames = [];

  for (const friend of allFriends) {
    if (friend.online) {
      friendsNames.push(friend.name)
    }
  }
  return friendsNames;
}
console.log(getOnlimeFriends(friends));
*/
/* //! Task #4
TODO: –£ –Ω–∞—Å —î –æ–±'—î–∫—Ç, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º—É—Ç—å—Å—è –∑–∞—Ä–ø–ª–∞—Ç–∏ –Ω–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏. –ù–∞–ø–∏—à—ñ—Ç—å –∫–æ–¥ –¥–ª—è —Å—É–º—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞—Ä–ø–ª–∞—Ç —ñ –∑–±–µ—Ä–µ–∂—ñ—Ç—å –π–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É –∑–º—ñ–Ω–Ω—ñ–π sum. –Ø–∫—â–æ –æ–±'—î–∫—Ç salaries –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—î –±—É—Ç–∏ 0
TODO ‚Äì Var 1 Object.entries()
const salaries = {
    Mango: 100,
    Poly: 160,
    Ajax: 222 ,
};
let sum = 0;
const array = Object.entries(salaries);
for (const arrayElement of array) {
    sum+=arrayElement[1];
}
console.log(sum);
TODO ‚Äì Var 2 Object.keys()
const salaries = {
    Mango: 100,
    Poly: 160,
    Ajax: 222,
};

const keys = Object.keys(salaries);
let sum = 0;
for (let i = 0; i < keys.length; i++) {
    sum += salaries[keys[i]];
}

console.log(sum);
*/
/* //! Task #5
TODO: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —è–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±'—î–∫—Ç —Ç–∞ —Ñ–æ—Ä–º—É—î –æ–±'—î–∫—Ç–∏ —É –Ω–æ–≤–æ–º—É –º–∞—Å–∏–≤—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ [key, value]
const user = {
  name: 'John',
  surName: 'Stones',
  age: 20,
  hobby: 'tenis',
  haveCar: true,
  merried: false,
};
const getArray = function (obj) {
  const newArray = [];
  const keys = Object.keys(obj);

  for (const key of keys) {
    newArray.push({ [key]: obj[key] });
  }
  return newArray;
};

console.log(getArray(user));
/*/
/* //! Task #6
TODO: –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calcTotalPrice(stones, stoneName), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ –æ–± º—î–∫—Ç—ñ–≤ —Ç–∞ —Ä—è–¥–æ–∫ –∑ –Ω–∞–∑–≤–æ—é –∫–∞–º–µ–Ω—é. –§—É–Ω–∫—Ü—ñ—è —Ä–∞—Ö—É—î —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º—ñ–Ω–Ω—è –∑ —Ç–∞–∫–∏–º —ñ–º º—è–º, —Ü—ñ–Ω–æ—é —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑ –æ–± º—î–∫—Ç–∞
const stones = [
  { name: '–ê–∫–æ–Ω—ñ—Ç', price: 100, quantity: 10 },
  { name: '–°–º–∞—Ä–∞–≥–¥', price: 1300, quantity: 4 },
  { name: '–î—ñ–∞–º–∞–Ω—Ç', price: 2700, quantity: 3 },
  { name: '–°–∞–ø—Ñ—ñ—Ä', price: 400, quantity: 7 },
  { name: '–©–µ–±—ñ–Ω—å', price: 200, quantity: 2 },
]

const calcTotalPrice = function (allStones, stoneName) {
  stoneName = stoneName.toLowerCase();
  for (const stone of allStones) {
    if (stone.name.toLowerCase() === stoneName) {
      return stone.price * stone.quantity;
    }
  }
}
console. log(calcTotalPrice(stones, '–î—ñ–∞–º–∞–Ω—Ç'));
console. log(calcTotalPrice(stones, '–°–º–∞–†–∞–≥–¥'));
console. log(calcTotalPrice(stones, '–∞–∫–æ–Ω—ñ—Ç'));
*/
/* //! Task #7
TODO: –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±—î–∫—Ç –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ "–¥–æ–≤–∂–∏–Ω–∞" —Ç–∞ "—à–∏—Ä–∏–Ω–∞", –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ—Ç–æ–¥ "CalculateArea", —è–∫–∏–π –±—É–¥–µ –æ–±—á–∏—Å–ª—é–≤–∞—Ç–∏ –ø–ª–æ—â—É –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –π–æ–≥–æ –¥–æ–≤–∂–∏–Ω–∏ —Ç–∞ —à–∏—Ä–∏–Ω–∏
const rectangle = {
  width: 27,
  height: 23,
  calculateArea() {
    return this.width * this.height;
  }
}
console.log(rectangle.calculateArea());
*/
/* //! Task #8
TODO: –°—Ç–≤–æ—Ä—ñ—Ç—å –æ–±'—î–∫—Ç "bankAccount" –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ "ownerName", "accountNumber", "balance". –î–æ–¥–∞–π—Ç–µ –¥–æ –æ–±'—î–∫—Ç—É –º–µ—Ç–æ–¥ "deposit", —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –¥–æ–¥–∞–≤–∞—Ç–∏ –≥—Ä–æ—à—ñ –Ω–∞ —Ä–∞—Ö—É–Ω–æ–∫, —Ç–∞ –º–µ—Ç–æ–¥ "withdraw", —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î –∑–Ω—ñ–º–∞—Ç–∏ –≥—Ä–æ—à—ñ –∑ —Ä–∞—Ö—É–Ω–∫—É. –ú–µ—Ç–æ–¥–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫–∏ ‚Äú–ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫‚Äù —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ ‚Äò–≥–æ—Ç—ñ–≤–∫—É‚Äô –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ.–ü—ñ—Å–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏–≤–æ–¥–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É.
const bankAccount = {
  ownerName: 'John Doe',
  accountNumber: '21',
  balance: 23098,
  deposit(sum) {
    this.balance += sum;
  },
  withdraw(sum) {
    this.balance -= sum;
  },
};

bankAccount.deposit(234);
console.log(bankAccount);

bankAccount.withdraw(234);
console.log(bankAccount);
*/
/* //! Task #9 Object.keys()
TODO: –ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ obj —ñ key, —è–∫–∞ –±—É–¥–µ –ø–µ—Ä–µ–±–∏—Ä–∞—Ç–∏ –æ–±'—î–∫—Ç. –Ø–∫—â–æ –æ–±'—î–∫—Ç –º–∞—î —Ç–∞–∫–∏–π –∫–ª—é—á - –ø–æ–≤–µ—Ä–Ω–µ true
TODO ‚Äì Var 1
const obj = {
    name: 'Igor',
    car: 'Mercedes',
    carColor: 'black',
  };

 const checkObj = function (obj, key){
     const keys = Object.keys(obj);
     for (const item of keys){
         if (item === key){
             return true;
         }
     }
     return false;
}
 
console.log(checkObj(obj, "car"));
TODO ‚Äì Var 2
const obj = {
    name: 'Igor',
    car: 'Mercedes',
    carColor: 'black',
  };

 const checkObj = function (obj, key){
     return Object.keys(obj).includes(key);
 }
console.log(checkObj(obj, "car"));
*/

/* //! –º–∞—Å–∏–≤.forEach(el, idx, arr)
TODO: –º–∞—Å–∏–≤.forEach(function(element, index, array) => {–¢–£–¢ –∫–æ–¥});
 * - –ü–æ–µ–ª–µ–º–µ–Ω—Ç–Ω–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * - –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ (–∞–ª–µ –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –π–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î –æ–±'—î–∫—Ç–∞–º–∏)
 * - –ù–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –∞ –ø—Ä–æ—Å—Ç–æ –≤–∏–∫–æ–Ω—É—î –ø–µ—Ä–µ–¥–∞–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É
 * - –ù–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ map(), –º–µ—Ç–æ–¥ forEach() –Ω–µ —Å—Ç–≤–æ—Ä—é—î —ñ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –∞ –ª–∏—à–µ –≤–∏–∫–æ–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞.
TODO: –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É numbers –±—É–¥—É—Ç—å –ø–æ–º–Ω–æ–∂–µ–Ω—ñ –Ω–∞ 2.
const numbers = [1, 2, 3, 4, 5];
const doubleNumbers = [];
numbers.forEach(el => doubleNumbers.push(el * 2));

console.log('numbers:', numbers);
console.log('doubleNumbers:', doubleNumbers);
*/
/* //! –º–∞—Å–∏–≤.map(el, idx, arr)
TODO: –º–∞—Å–∏–≤.map((element, index, array) => {–¢–£–¢ –∫–æ–¥});
 * - –ü–æ–µ–ª–µ–º–µ–Ω—Ç–æ –ø–µ—Ä–µ–±–∏—Ä–∞—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * - –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
 * - –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–∞–∫–æ—ó –∂ –¥–æ–≤–∂–∏–Ω–∏
TODO: –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –≤ —è–∫–æ–º—É —É—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É numbers –±—É–¥—É—Ç—å –ø–æ–º–Ω–æ–∂–µ–Ω—ñ –Ω–∞ 2.
const numbers = [1, 2, 3, 4, 5];
const doubleNumbers = numbers.map(el => el * 2);

console.log('numbers:', numbers);
console.log('doubleNumbers:', doubleNumbers);

TODO: –ù–µ—Ö–∞–π —Ñ—É–Ω–∫—Ü—ñ—è getModels –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –º–æ–¥–µ–ª–µ–π (–ø–æ–ª–µ model) –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤.
const allCars = [
  { make: 'Honda', model: 'Accord', amount: 2, price: 22455 },
  { make: 'Mazda', model: 'Mazda 6', amount: 8, price: 24195 },
  { make: 'Mazda', model: 'CX-9', amount: 7, price: 31520 },
  { make: 'Toyota', model: '4Runner', amount: 19, price: 34210 },
  { make: 'Toyota', model: 'Sequoia', amount: 16, price: 45560 },
  { make: 'Toyota', model: 'Tacoma', amount: 4, price: 24320 },
  { make: 'Ford', model: 'F-150', amount: 11, price: 27110 },
  { make: 'Ford', model: 'Fusion', amount: 13, price: 22120 },
  { make: 'Ford', model: 'Explorer', amount: 6, price: 31660 },
  { make: 'Honda', model: 'CR-V', amount: 14, price: 24045 },
];

  .//!  –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è
const getModels = cars => {
  const allModels = cars.map((el, idx, arr) => {
    return el.model;
  });
  return allModels;
};

console.log(getModels(allCars));

  .//!  –°–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
const getModels = cars => cars.map(car => car.model);

console.log(getModels(allCars));
*/
/* //! const newObj = structuredClone(originalObj);
TODO: const –Ω–æ–≤–∏–π–û–±'—î–∫—Ç = structuredClone(–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π–û–±'—î–∫—Ç);
 * - –ì–ª–∏–±–æ–∫–æ –∫–æ–ø—ñ—é—î –æ–±'—î–∫—Ç –∞–±–æ –º–∞—Å–∏–≤, —Å—Ç–≤–æ—Ä—é—é—á–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω—É –∫–æ–ø—ñ—é
 * - –ù–µ –∑–º—ñ–Ω—é—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –æ–±'—î–∫—Ç –∞–±–æ –º–∞—Å–∏–≤
 * - –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç –∞–±–æ –º–∞—Å–∏–≤, —è–∫–∏–π —î —Ç–æ—á–Ω–æ—é –∫–æ–ø—ñ—î—é –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ
TODO: 
const original = { name: "John", details: { age: 30 } };
const copy = structuredClone(original);
copy.details.age = 35;

console.log(original.details.age); // 30 (–æ—Ä–∏–≥—ñ–Ω–∞–ª –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è)
console.log(copy.details.age); // 35 (–∑–º—ñ–Ω–∏ —Ç—ñ–ª—å–∫–∏ –≤ –∫–æ–ø—ñ—ó)
*/

//#endregion
