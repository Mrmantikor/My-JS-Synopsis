//#region //? String
/* //! + Конкатенація рядків (String Concatenation)
TODO: Об’єднує два операнди в один рядок, якщо хоча б один із них є рядком, або виконує додавання, якщо обидва числа.
 * - Оператор перевіряє типи операндів.
 * - Якщо хоча б один операнд є рядком, обидва приводяться до рядків і об’єднуються.
 * - Якщо обидва операнди числа, виконується арифметичне додавання.
 * - Нечислові значення (null, undefined, true, тощо) при конкатенації з рядком приводяться до рядкової форми.
console.log('Hello' + 'World'); // Виведе: 'HelloWorld'
console.log('Number: ' + 42); // Виведе: 'Number: 42'
console.log('' + 0); // Виведе: '0'
console.log(null + 'test'); // Виведе: 'nulltest'
console.log(undefined + ('' && false)); // Виведе: 'undefined'
console.log(('Hi' + '') * (false + true)); // Виведе: NaN
console.log(('NaN' + '') - (false + 'true')); // Виведе: NaN
console.log(('Code' + 5) + (false + true)); // Виведе: 'Code51'
console.log(('Text' + NaN) / ('yes' + false)); // Виведе: NaN
console.log((null + 'end') / (0 + 1)); // Виведе: NaN
console.log((undefined + 'start') * ('' + false)); // Виведе: NaN
*/
/* //! `` Шаблонні рядки (Template Literals) (Backtick - Бектіки)
TODO: Створює рядок із використанням зворотних лапок, дозволяючи вбудовувати вирази через ${} і писати багатострокові рядки.
 * - Використовуються зворотні лапки (``) замість одинарних або подвійних лапок.
 * - Вирази всередині ${} обчислюються і підставляються в рядок.
 * - Підтримує пряме написання рядків із переносами без спеціальних символів (\n).
 * - Усі операнди всередині ${} приводяться до рядків.
TODO – Запросіть у користувача ім'я та прізвище і виведіть у консоль повідомлення: Hello <імʼя> <прізвище>, you are logged in.
const firstName = prompt('Введіть ваше імʼя!');
const lastName = prompt('Введіть ваше прізвище!');
const message = `Hello ${firstName} ${lastName}, you are logged in.`;
alert(message);
*/
/* //! Явне перетворення рядків (Explicit String Conversion)
TODO: Перетворює значення в рядок за допомогою спеціальних методів чи функцій, таких як String() або .toString().
 * - Використовується для явного приведення значення до рядкового типу.
 * - String() працює з будь-яким значенням, включаючи null і undefined.
 * - .toString() викликається на об’єктах/числах, але не працює з null і undefined.
 * - Результат завжди рядок, навіть для спеціальних значень (NaN, null, тощо).
console.log(String(false)); // Виведе: 'false'
console.log(String(42)); // Виведе: '42'
console.log((0).toString()); // Виведе: '0'
console.log(String(null)); // Виведе: 'null'

*/
/* //! length (Властивість довжини - Length Property)
TODO: Повертає кількість елементів у рядку (символів) або масиві (елементів).
 * - Доступна для рядків (кількість символів у кодуванні UTF-16) і масивів (кількість індексованих елементів).
 * - Для рядків: повертає число символів, враховуючи пробіли та спеціальні символи.
 * - Для масивів: повертає кількість елементів, незалежно від їх типу чи значення.
 * - Повертає ціле число (не від’ємне), для інших типів недоступна напряму.
console.log('Hello'.length); // Виведе: 5
console.log([1, 2, 3].length); // Виведе: 3
console.log(''.length); // Виведе: 0
*/
/* //! indexOf() (Пошук індексу - Index Of)
TODO: Повертає індекс першого входження вказаного значення в рядку або масиві, або -1, якщо значення не знайдено.
 * - Для рядків: шукає підрядок, повертає позицію першого символу.
 * - Для масивів: шукає елемент, повертає його індекс (порівняння через ===).
 * - Приймає необов’язковий другий аргумент — позицію, з якої починати пошук.
 * - Чутливий до регістру для рядків, для масивів порівнює тип і значення.
console.log('Hello'.indexOf('l')); // Виведе: 2
console.log([1, 2, 3].indexOf(2)); // Виведе: 1
console.log('Hello'.indexOf('x')); // Виведе: -1

const howIndex = 'Bohdan';
console.log(howIndex[2]); // Виведе: 'h' (доступ до символу за індексом 2)
console.log(howIndex[6]); // Виведе: undefined (індекс поза межами рядка)
console.log(howIndex[howIndex.length - 1]); // Виведе: 'n' (останній символ)
console.log(howIndex.indexOf(howIndex[howIndex.length - 1])); // Виведе: 5 (індекс останнього символу 'n')
*/
/* //! charCodeAt() (Код символу за індексом - Character Code At)
TODO: Повертає числовий код UTF-16 символу в рядку за вказаним індексом.
 * - Приймає один аргумент — індекс символу (ціле число, від 0 до length - 1).
 * - Повертає ціле число від 0 до 65535, яке відповідає коду UTF-16 символу.
 * - Якщо індекс поза межами рядка або не вказано, повертає NaN.
 * - Для складних символів (наприклад, емодзі) може повертати код лише однієї одиниці UTF-16.
console.log('Hello'.charCodeAt(0)); // Виведе: 72 (код 'H')
console.log('Hello'.charCodeAt(2)); // Виведе: 108 (код 'l')
console.log(''.charCodeAt(0)); // Виведе: NaN (немає символів)
console.log('Bohdan'.charCodeAt('Bohdan'.length - 1)); // Виведе: 110 (код 'n')
console.log('Test'.charCodeAt(4)); // Виведе: NaN (індекс поза межами)
*/
/* //! trim() (Видалення пробілів із початку та кінця рядка)
TODO: Повертає новий рядок, із якого видалено всі пробіли (whitespace) із початку та кінця.
 * - Метод рядка, який прибирає пробіли, табуляцію, нові рядки з обох кінців.
 * - Не змінює сам рядок (рядки в JS незмінні), повертає новий рядок.
 * - Не впливає на пробіли всередині рядка, лише на початку та в кінці.
 * - Повертає порожній рядок, якщо весь рядок складався з пробілів.

TODO: Приклад із видаленням пробілів
const methodTrim = '  You NOT Love is Java Skript?!  ';
console.log(methodTrim.trim()); // Виведе: 'You NOT Love is Java Skript?!'

TODO: Приклад із порівнянням довжини
const str = '    Вже полюбив JS? :)    ';
console.log(str.length);        // Виведе: 27 (включаючи пробіли)
console.log(str.trim().length); // Виведе: 15 (без пробілів на початку та в кінці)

TODO: Ще один приклад із довжиною
const str1 = '  Як у тебе справи?  ';
console.log(str1.length);        // Виведе: 22 (включаючи пробіли)
console.log(str1.trim().length); // Виведе: 18 (без пробілів на початку та в кінці)
*/
/* //! toLocaleLowerCase() (Переведення рядка в нижній регістр із урахуванням локалі)
TODO: Повертає новий рядок, у якому всі символи переведено в нижній регістр із урахуванням правил локалі.
 * - Метод рядка, який перетворює символи в нижній регістр, враховуючи особливості мови (локаль).
 * - Не змінює оригінальний рядок (рядки в JS незмінні), повертає новий рядок.
 * - Приймає необов’язковий аргумент — локаль (наприклад, 'tr' для турецької), за замовчуванням — локаль середовища.
 * - Відрізняється від toLowerCase() тим, що адаптується до мовних правил (наприклад, турецька 'İ' → 'i').
 *  - Трохи повільніше за toUpperCase() через врахування локалі, але різниця незначна.

TODO: Простий приклад без локалі
const str = 'Hello World!';
console.log(str.toLocaleLowerCase()); // Виведе: 'hello world!'

TODO: Приклад із локаллю
const strWithLocale = 'I LOVE JAVASCRIPT';
console.log(strWithLocale.toLocaleLowerCase('tr')); // Виведе: 'ı love javascript' (турецька локаль)

TODO: Приклад із порівнянням довжини
const mixedCase = 'CoDe WiTh LoVe';
console.log(mixedCase.length);              // Виведе: 14
console.log(mixedCase.toLocaleLowerCase().length); // Виведе: 14 (довжина не змінюється)

TODO: Приклад із кількома локалями
const upperStr = 'ÄÖÜ';
console.log(upperStr.toLocaleLowerCase('de')); // Виведе: 'äöü' (німецька локаль)
console.log(upperStr.toLocaleLowerCase());     // Виведе: 'äöü' (залежить від локалі середовища)
*/
/* //! toLocaleUpperCase() (Переведення рядка у верхній регістр із урахуванням локалі)
TODO: Повертає новий рядок, у якому всі символи переведено у верхній регістр із урахуванням правил локалі.
 * - Метод рядка, який перетворює символи у верхній регістр, враховуючи особливості мови (локаль).
 * - Не змінює оригінальний рядок (рядки в JS незмінні), повертає новий рядок.
 * - Приймає необов’язковий аргумент — локаль (наприклад, 'tr' для турецької), за замовчуванням — локаль середовища.
 * - Відрізняється від toUpperCase() тим, що адаптується до мовних правил (наприклад, турецька 'i' → 'İ').
 * - Трохи повільніше за toUpperCase() через врахування локалі, але різниця незначна.

TODO: Простий приклад без локалі
const str = 'Hello world!';
console.log(str.toLocaleUpperCase()); // Виведе: 'HELLO WORLD!'

TODO: Приклад із локаллю
const strWithLocale = 'i love javascript';
console.log(strWithLocale.toLocaleUpperCase('tr')); // Виведе: 'İ LOVE JAVASCRIPT' (турецька локаль)

TODO: Приклад із порівнянням довжини
const mixedCase = 'CoDe WiTh LoVe';
console.log(mixedCase.length);              // Виведе: 14
console.log(mixedCase.toLocaleUpperCase().length); // Виведе: 14 (довжина не змінюється)

TODO: Приклад із кількома локалями
const lowerStr = 'äöü';
console.log(lowerStr.toLocaleUpperCase('de')); // Виведе: 'ÄÖÜ' (німецька локаль)
console.log(lowerStr.toLocaleUpperCase());     // Виведе: 'ÄÖÜ' (залежить від локалі середовища)
*/

/* //! repeat() (Повторення рядка)
TODO: Повертає новий рядок, який складається з оригінального рядка, повтореного вказану кількість разів.
 * - Метод рядка, який створює новий рядок шляхом повторення початкового рядка задану кількість разів.
 * - Приймає один аргумент — кількість повторень (ціле число, від 0 до Infinity).
 * - Не змінює оригінальний рядок (рядки в JS незмінні), повертає новий рядок.
 * - Якщо аргумент — 0, повертає порожній рядок; якщо від’ємний або не число — видає помилку.

TODO: Простий приклад із повторенням
const str = 'Hi ';
console.log(str.repeat(3)); // Виведе: 'Hi Hi Hi '

TODO: Приклад із одним символом
const symbol = '*';
console.log(symbol.repeat(5)); // Виведе: '*****'

TODO: Приклад із нульовим повторенням
const word = 'Hello';
console.log(word.repeat(0)); // Виведе: '' (порожній рядок)

TODO: Приклад із комбінацією
const phrase = 'JS ';
console.log(phrase.repeat(2) + 'is fun!'); // Виведе: 'JS JS is fun!'
*/
//#endregion

/* //! localeCompare()
TODO: Правильне порівняння строк
console.log('Hallo'.localeCompare('Hello'));
*/

slice();

/* //! localeCompare() (Порівняння рядків із урахуванням локалі)
TODO: Порівнює два рядки з урахуванням правил локалі та повертає число, яке вказує на їхній порядок.
 * - Метод рядка, який порівнює базовий рядок із заданим рядком, враховуючи мовні правила.
 * - Повертає: -1 (або від’ємне), якщо базовий рядок іде перед заданим; 1 (або додатне), якщо після; 0, якщо рядки рівні.
 * - Приймає аргументи: рядок для порівняння (обов’язковий) і необов’язкові локаль та опції.
 * - Не змінює оригінальний рядок, працює з урахуванням локалі (наприклад, 'en', 'de').

// Простий приклад порівняння
const str1 = 'apple';
const str2 = 'banana';
console.log(str1.localeCompare(str2)); // Виведе: -1 (apple < banana)

// Приклад із локаллю
const str3 = 'äpfel'; // Німецьке слово
const str4 = 'apfel';
console.log(str3.localeCompare(str4, 'de')); // Виведе: 1 (äpfel > apfel у німецькій локалі)

// Приклад із однаковими рядками
const str5 = 'hello';
console.log(str5.localeCompare('hello')); // Виведе: 0 (рядки рівні)

// Приклад із опціями
const str6 = 'ZEBRA';
const str7 = 'zebra';
console.log(str6.localeCompare(str7, 'en', { sensitivity: 'base' })); // Виведе: 0 (ігнорує регістр)
*/
