//#region //? Розгалуження
/* //! if (Розгалуження - Умовний оператор)
TODO: Виконує блок коду, якщо умова істинна, без альтернативних гілок else if чи else, включаючи запуск циклів за умовою.
 * - Умовний оператор, який перевіряє умову і виконує блок коду, якщо результат умови — true.
 * - Умова — вираз, який приводиться до булевого типу (true або false).
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти, масиви тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Без else if чи else: код просто пропускається, якщо умова не виконується.
 * - Може запускати цикли всередині блоку для повторюваних дій.

TODO: Простий приклад із порівнянням
const age = 20;
if (age >= 18) {
  console.log('Ви можете голосувати'); // Умова true, код виконається
}

const temperature = -5;
if (temperature > 0) {
  console.log('На вулиці тепло'); // Умова false, код не виконається
}
*/
/* //! if...else (Розгалуження - Умовний оператор із альтернативою)
TODO: Виконує один із двох блоків коду залежно від того, чи виконується умова: if для true, else для false.
 * - Умовний оператор, який перевіряє умову і виконує блок if, якщо умова істинна (true), або блок else, якщо хибна (false).
 * - Умова — вираз, який приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Використовується для двостороннього вибору: одна гілка для виконання, інша — для пропуску.

TODO: Простий приклад із порівнянням
const age = 16;
if (age >= 18) {
  console.log('Ви повнолітній');
} else {
  console.log('Ви неповнолітній'); // Виведе: 'Ви неповнолітній'
}
*/
/* //! if-else if-else (Розгалуження - Умовний оператор із кількома гілками)
TODO: Виконує один із кількох блоків коду залежно від виконання умов, із фінальною альтернативою else.
 * - Умовний оператор, який перевіряє послідовно умови і виконує перший блок із істинною умовою (true).
 * - Якщо жодна умова не виконана, виконується блок else (якщо є).
 * - Умова — вираз, який приводиться до булевого типу (true/false).
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.

TODO: Простий приклад із однією умовою та альтернативою
const temperature = 25;
if (temperature > 30) {
  console.log('Дуже жарко'); // Умова false, пропускається
} else if (temperature > 20) {
  console.log('Тепло'); // Умова true, виконується
} else {
  console.log('Прохолодно'); // Пропускається через виконання попередньої умови
}

TODO: Приклад із кількома умовами
const score = 75;
if (score >= 90) {
  console.log('Відмінно'); // Умова false, пропускається
} else if (score >= 80) {
  console.log('Дуже добре'); // Умова false, пропускається
} else if (score >= 70) {
  console.log('Добре'); // Умова true, виконується
} else {
  console.log('Задовільно'); // Пропускається через виконання попередньої умови
}

TODO: Приклад із негативним значенням
const number = -5;
if (number > 0) {
  console.log('Число позитивне'); // Умова false, пропускається
} else if (number === 0) {
  console.log('Число дорівнює нулю'); // Умова false, пропускається
} else {
  console.log('Число негативне'); // Умова відсутня, виконується else
}
*/
/* //! Ternary Operator (Тернарний оператор)
TODO: Компактна форма умовного оператора, яка повертає одне з двох значень залежно від умови.
.//! Syntax: умова ? значення_якщо_true : значення_якщо_false.
 * - Умова — вираз, який приводиться до булевого типу (true/false).
 * - Виконує порівняння і повертає значення: перше (перед :) якщо true, друге (після :) якщо false.
 * - Truthy значення: ненульові числа, непорожні рядки, об’єкти тощо.
 * - Falsy значення: 0, '', null, undefined, NaN, false.
 * - Використовується для коротких умовних виразів замість if-else.

TODO: Простий приклад із порівнянням віку
const age = 20;
const status = age >= 18 ? 'Повнолітній' : 'Неповнолітній';
console.log(status); // Виведе: 'Повнолітній'

TODO: Приклад із температурою
const temperature = -5;
const weather = temperature > 0 ? 'Тепло' : 'Холодно';
console.log(weather); // Виведе: 'Холодно'

TODO: Приклад із перевіркою рядка
const text = 'Hello';
const lengthCheck = text.length > 3 ? 'Довгий рядок' : 'Короткий рядок';
console.log(lengthCheck); // Виведе: 'Довгий рядок'

TODO: Приклад із числом
const number = 0;
const sign = number > 0 ? 'Позитивне' : 'Негативне або нуль';
console.log(sign); // Виведе: 'Негативне або нуль'
*/
/* //! switch (Перемикач - Умовний оператор із випадками)
TODO: Виконує один із кількох блоків коду залежно від значення виразу, порівнюючи його з набором випадків.
 * - Умовний оператор, який порівнює значення виразу з кількома випадками (case) і виконує відповідний блок.
 * - Використовує суворе порівняння (===) між виразом і значенням кожного case.
 * - Має необов’язковий блок default, який виконується, якщо жоден case не збігається.
 * - Виконання переходить до наступного case, якщо немає break (fall-through).
 * - Коли виконання коду блоку case завершено, необхідно використовувати оператор break, щоб вийти зі switch. Це запобігає виконанню коду в наступних блоках case.
 * - Якщо жодне значення не відповідає виразу, виконається код у блоці default (якщо він є).
 * - За наявності блоку default його слід розташовувати останнім у блоці коду з оператором switch.
 * - Альтернатива множинним if-else if-else для чітких порівнянь.

TODO: Простий приклад із температурою
const temperature = 25;
switch (temperature) {
  case 30:
    console.log('Жарко'); // Не збігається
    break;
  case 25:
    console.log('Тепло'); // Збігається, виконується
    break;
  case 15:
    console.log('Прохолодно'); // Пропускається через break вище
    break;
  default:
    console.log('Невідома температура'); // Не виконується через збіг із case 25
}

TODO: Приклад із оцінкою
const score = 85;
switch (true) {
  case score >= 90:
    console.log('Відмінно'); // Не збігається
    break;
  case score >= 80:
    console.log('Добре'); // Збігається, виконується
    break;
  case score >= 70:
    console.log('Задовільно'); // Пропускається через break вище
    break;
  default:
    console.log('Низький бал'); // Не виконується через збіг із case >= 80
}
*/
//#endregion

//#region
/* //! console.time() і console.timeEnd() (Вимірювання часу виконання)
TODO: Вимірює час у мілісекундах між викликом console.time() і console.timeEnd().
TODO: performance.now() — для точнішого вимірювання в мілісекундах.
 * - console.time(label): запускає таймер із заданим ідентифікатором (label).
 * - console.timeEnd(label): зупиняє таймер із відповідним ідентифікатором і виводить час.
 * - Аргумент label (рядок) — унікальний ідентифікатор таймера, має збігатися для пари.
 * - Повертає undefined, але виводить результат у консоль у форматі "label: час ms".
console.time('simple-loop'); // Починає таймер із міткою 'simple-loop'
for (let i = 0; i < 1000000; i++) {} // Простий цикл
console.timeEnd('simple-loop'); // Виведе: 'simple-loop: X.XXX ms' (наприклад, 2.345 ms)

console.time('array-sum'); // Починає таймер із міткою 'array-sum'
const arr = [1, 2, 3, 4, 5];
let sum = 0;
for (const num of arr) { sum += num; }
console.timeEnd('array-sum'); // Виведе: 'array-sum: X.XXX ms'

console.time('for...of'); // Починає таймер із міткою 'for...of'
console.timeEnd('for...of'); // Виведе: 'for...of: X.XXX ms' (дуже малий час, наприклад, 0.001 ms)
*/
//#endregion
