// #region // –ú–∞—Å–∏–≤–∏ (–ü—Ä–∞–∫—Ç–∏–∫–∞)
/* //! Task #1
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–≤–∞ –º–∞—Å–∏–≤–∏, –¥–µ –¥—Ä—É–≥–∏–π —î –∫–æ–ø—ñ—î—é –ø–µ—Ä—à–æ–≥–æ, –¥–æ–¥–∞—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç –¥–æ –ø–µ—Ä—à–æ–≥–æ –º–∞—Å–∏–≤—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–º—ñ–Ω–∏ –≤ –æ–±–æ—Ö.
const arr1 = [1, 2, 3];
const arr2 = arr1;
console.log('arr1:', arr1);
console.log('arr2:', arr2);
arr1[arr1.length] = 20;
console.log('arr1:', arr1);
console.log('arr2:', arr2);
console.log(arr1 === arr2);
*/

/* //! Task #2 for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞. –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.
TODO ‚Äì Var 1
const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçé', 'üçã'];
console.log('fruits:', fruits);
let fruitNumber = 1;
for (const fruit of fruits) {
  console.log(`${fruitNumber}: ${fruit}`);
  fruitNumber++;
}
TODO ‚Äì Var 2
const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçé', 'üçã'];
console.log('fruits:', fruits);
for (let i = 0; i < fruits.length; i++) {
  console.log(`${i + 1}: ${fruits[i]}`);
}
*/

/* //! Task #3 for(of)
TODO: –ü–µ—Ä–µ–±—Ä–∞—Ç–∏ –º–∞—Å–∏–≤ friends —ñ –≤–∏–≤–µ—Å—Ç–∏ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç —É –∫–æ–Ω—Å–æ–ª—å.
TODO ‚Äì Var 1
const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax'];
console.log('friends:', friends);
for (let i = 0; i < friends.length; i++) {
  console.log(friends[i]);
}
TODO ‚Äì Var 2
const friends = ['Mango', 'Kiwi', 'Poly', 'Ajax'];
for (const item of friends) {
  console.log(item);
}
*/

/* //! Task #4 split()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–∏—Ö –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —É –∑–º—ñ–Ω–Ω—ñ–π values —É –≤–∏–≥–ª—è–¥—ñ —Ä—è–¥–∫–∞. –ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º.
const values = '8 11';
const sidesArr = values.split(' ');
console.log('values:', values);
console.log('sidesArr:', sidesArr);
const rectangleArea = Number(sidesArr[0]) * Number(sidesArr[1]);
console.log('rectangleArea:', rectangleArea);
*/

/* //! Task #5 for(of)
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î —Å—É–º—É –≤—Å—ñ—Ö –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ.
const numbers = [1, 5, 8, 9, 12, 4, 15, 27, 30, 18, 14];
let total = 0;
for (const num of numbers) {
  if (num % 2 === 0) {
    total += num;
  }
}
console.log('numbers:', numbers);
console.log('total:', total);
*/

/* //! Task #6 for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
const names = 'Jacob,William,Solomon,Artemis';
const phones = '89001234567,89001112233,890055566377,890055566300';
console.log('names:', names);
console.log('phones:', phones);
const namesArr = names.split(',');
const phonesArr = phones.split(',');
console.log('namesArr:', namesArr);
console.log('phonesArr:', phonesArr);
for (let i = 0; i < namesArr.length; i++) {
  console.log(`${namesArr[i]} - ${phonesArr[i]}`);
}
*/

/* //! Task #7 split() join() indexOf() for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —É—Å—ñ —Å–ª–æ–≤–∞ —Ä—è–¥–∫–∞ –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ. –†–µ–∑—É–ª—å—Ç—É—é—á–∏–π —Ä—è–¥–æ–∫ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∞–±–æ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è –ø—Ä–æ–±—ñ–ª–æ–º.
TODO ‚Äì Var 1
const string = 'Welcome to the future';
const wordsArr = string.split(' ');
let resultStr = '';
console.log('string:', string);
console.log('wordsArr:', wordsArr);
for (let i = 1; i < wordsArr.length - 1; i++) {
  resultStr += ` ${wordsArr[i]}`;
}
resultStr = resultStr.trim();
console.log('resultStr:', resultStr);
TODO ‚Äì Var 2
const string = 'Welcome to the future';
let wordsArr = string.split(' ');
wordsArr = wordsArr.slice(1, wordsArr.length - 1);
const resultStr = wordsArr.join(' ');
console.log('string:', string);
console.log('wordsArr:', wordsArr);
console.log('resultStr:', resultStr);
TODO ‚Äì Var 3
const string = 'Welcome to the future';
const firstSpace = string.indexOf(' ');
const lastSpace = string.lastIndexOf(' ');
console.log('string:', string);
console.log('firstSpace:', firstSpace);
console.log('lastSpace:', lastSpace);
const resultStr = string.slice(firstSpace + 1, lastSpace);
console.log('resultStr:', resultStr);
*/

/* //! Task #8 for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —ó—ó –≤ –∫–æ–Ω—Å–æ–ª—å.
TODO ‚Äì Var 1
const string = 'Welcome to the future';
const lettersArr = string.split('');
let reversedStr = '';
console.log('string:', string);
console.log('lettersArr:', lettersArr);
for (let i = lettersArr.length - 1; i >= 0; i--) {
  reversedStr += lettersArr[i];
}
console.log('reversedStr:', reversedStr);
TODO ‚Äì Var 2
const string = 'Welcome to the future';
let reversedStr = '';
for (let i = string.length - 1; i >= 0; i--) {
  reversedStr += string[i];
}
console.log('string:', string);
console.log('reversedStr:', reversedStr);
*/

/* //! Task #9 for()
TODO: –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª.
const values = [17, -10, 94, -30, 1, 23, -20];
let min = values[0];
for (let i = 1; i < values.length; i++) {
  if (values[i] < min) {
    min = values[i];
  }
}
console.log('values:', values);
console.log('min:', min);
*/

/* //! Task #10 for()
TODO: –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–∞—Ä–ø–ª–∞—Ç —ñ–∑ –∫—ñ–ª—å–∫–æ—Ö –º–∞—Å–∏–≤—ñ–≤ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤.
const managerSalaries = [100, 150, 250, 400, 500];
const developersSalaries = [800, 1500, 4000];
let total = 0;
for (const salary of managerSalaries) {
  total += salary;
}
for (const salary of developersSalaries) {
  total += salary;
}
console.log('total:', total);
*/

/* //! Task #11 push()
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ styles, –¥–æ–¥–∞—Ç–∏ —Ç–∞ –∑–º—ñ–Ω–∏—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–µ—Ä—à–∏–π —ñ –≤—Å—Ç–∞–≤–∏—Ç–∏ –Ω–æ–≤—ñ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫.
const styles = ['–î–∂–∞–∑', '–ë–ª—é–∑'];
styles.push('–†–æ–∫-–Ω-—Ä–æ–ª');
const index = styles.indexOf('–ë–ª—é–∑');
styles[index] = '–ö–ª–∞—Å–∏–∫–∞';
const deleteElement = styles.shift();
styles.unshift('–†–µ–ø', '–†–µ–≥–≥—ñ');
console.log(styles);
*/

/* //! Task #12 push() function()
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é multiples(m, n), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –ø–µ—Ä—à–∏—Ö m –∫—Ä–∞—Ç–Ω–∏—Ö —á–∏—Å–ª–∞ n.
TODO ‚Äì Var 1
function multiples(m, n) {
  const arr = [];
  let startNum = n;
  for (let i = 0; i < m; i += 1) {
    arr.push(startNum);
    startNum += n;
  }
  return arr;
}
console.log(multiples(4, 4));
TODO ‚Äì Var 2
function multiples(m, n) {
  const arr = [];
  for (let i = 1; i <= m; i += 1) {
    arr.push(n * i);
  }
  return arr;
}
console.log(multiples(4, 4));
*/

/* //! Task #13 for(of) split()
TODO: –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫ —Å–ª—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏—Ö –∫–æ–º–∞–º–∏, –≤ –º–∞—Å–∏–≤ —ñ –≤–∏–≤–µ—Å—Ç–∏ –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É.
TODO ‚Äì Var 1
const str = 'HTML, JavaScript, CSS, React';
const array = str.split(',');
console.log(array);
let longestWord = array[0];
for (let index = 1; index < array.length; index++) {
  const word = array[index];
  if (longestWord.length < array[index].length) {
    longestWord = array[index];
  }
}
console.log(longestWord);
TODO ‚Äì Var 2
const str = 'HTML, JavaScript, CSS, React';
const array = str.split(',');
console.log(array);
for (let index = 0; index < array.length; index++) {
  const word = array[index];
  console.log(word);
}
TODO ‚Äì Var 3
const str = 'HTML, JavaScript, CSS, React';
const array = str.split(',');
console.log(array);
for (const element of array) {
  console.log(element);
}
*/

/* //! Task #14 split() join()
TODO: –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤ —É —Ä—è–¥–∫—É —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫, —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –¥–µ—Ñ—ñ—Å–∞–º–∏ —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
const message = 'JavaScript is a popular programming language.';
const newMessage = message.split(' ').join('-').toLowerCase();
console.log(newMessage);
const arrayLength = message.split(' ').length;
console.log(arrayLength);
*/

/* //! Task #15 for() if() else{}
TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ —Ä–µ–≥—ñ—Å—Ç—Ä –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É –≤ —Ä—è–¥–∫—É –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'JavaScript' ‚Üí 'jAVAsCRIPT').
TODO ‚Äì Var 1
const str = 'JavaScript';
let updateString = '';
for (let i = 0; i < str.length; i++) {
  if (str[i] === str[i].toUpperCase()) {
    updateString += str[i].toLowerCase();
  } else {
    updateString += str[i].toUpperCase();
  }
}
console.log(updateString);
TODO ‚Äì Var 2
const str = 'JavaScript';
let updateString = '';
const array = str.split('');
const updateArray = [];
for (let i = 0; i < array.length; i++) {
  if (array[i] === array[i].toUpperCase()) {
    updateArray.push(array[i].toLowerCase());
  } else {
    updateArray.push(array[i].toUpperCase());
  }
}
console.log(updateArray.join(''));
*/

/* //! Task #16 indexOf()
TODO: –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É, —â–æ –º—ñ—Å—Ç—è—Ç—å –∑–∞–¥–∞–Ω—É –ø—ñ–¥—Å—Ç—Ä–æ–∫—É, —Ç–∞ –æ–±'—î–¥–Ω–∞—Ç–∏ —ó—Ö —É –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.
const wordsArray = ['JavaScript', 'HTML', 'CSS', 'React'];
const substring = 'S';
const array = [];
for (const str of wordsArray) {
  if (str.includes(substring)) {
    array.push(str);
  }
}
console.log(array);
*/

/* //! Task #17 for() if() else{}
TODO: –û–±‚Äô—î–¥–Ω–∞—Ç–∏ –¥–≤–∞ –º–∞—Å–∏–≤–∏ —á–∏—Å–µ–ª —ñ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –ø–∞—Ä–Ω—ñ —Ç–∞ –Ω–µ–ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞ –≤ –æ–∫—Ä–µ–º—ñ –º–∞—Å–∏–≤–∏.
const firstArray = [1, 2, 3, 5, 4];
const secondArray = [10, 21, 33, 55, 44];
const newArray = firstArray.concat(secondArray);
const evenNumbers = [];
const oddNumbers = [];
for (const element of newArray) {
  if (element % 2 === 0) {
    evenNumbers.push(element);
  } else {
    oddNumbers.push(element);
  }
}
console.log(evenNumbers);
console.log(oddNumbers);
*/

/* //! Task #18 for() if() function()
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é findSmallerNumber(numbers), —è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ –≤ –º–∞—Å–∏–≤—ñ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –º–∞—Å–∏–≤.
TODO ‚Äì Var 1 (–®—É–∫–∞—î –Ω–∞–π–º–µ–Ω—à—É —Å—Ç—Ä–æ–∫—É)
const findSmallerNumber = function(numbers){
    if(!Array.isArray(numbers)){
       return 'number is not Array'; 
    }
    let smallNumber = numbers[0];
    for(let i = 0; i < numbers.length; i++){
        if(smallNumber > numbers[i]){
            smallNumber = numbers[i];
        }
    }
    return smallNumber;
}
console.log(findSmallerNumber(0));
console.log(findSmallerNumber([5,'-13',-7,-11,'a']));
TODO ‚Äì Var 2 (–®—É–∫–∞—î –Ω–∞–π–º–µ–Ω—à–µ —á–∏—Å–ª–æ)
const findSmallerNumber = function(numbers){
    if(!Array.isArray(numbers)){
        return 'number is not Array';
    }
    let smallNumber = numbers[0];
    for(let number of numbers){
        if(typeof number !== 'number'){
            continue;
        }
        if(smallNumber > number){
            smallNumber = number;
        }
    }
    return smallNumber;
}
console.log(findSmallerNumber(0));
console.log(findSmallerNumber([5,'-13',-7,-11,'a']));
*/

/* //! Task #19 function()
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é min(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—à–µ –∑ —á–∏—Å–µ–ª a, b —ñ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ —á–∏—Å–ª–∞.
const compareNumbers = function (a, b) {
  return typeof a === "number" && typeof b === "number"
    ? Math.min(a, b)
    : "One of parameters is not a number";
};
console.log(compareNumbers(5, 3));
*/

/* //! Task #20 –ü–∞–ª—ñ–Ω–¥—Ä–æ–º
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ä–µ—á–µ–Ω–Ω—è –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
const isPalindrom = function (str) {
  const updateString = str.toLowerCase().replaceAll(" ", "");
  const array = [];
  for (let i = 0; i < updateString.length; i++) {
    array.push(updateString[updateString.length - 1 - i]);
  }
  let reversedString = array.join("");
  return updateString === reversedString;
};
console.log(isPalindrom(str));
*/

/* //! Task #21 function() for() if()
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É —î –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–Ω—à–æ–≥–æ.
TODO ‚Äì Var 1 
const numbers = [11, 9, 3, 121, 33, 24, 20];
const numbers2 = [121, 81, 9, 14641, 1089, 576, 400];
function check(numbers, numbers2) {
  const powNumbers = [];
  if (numbers.length !== numbers2.length) {
    return false;
  }
  for (let i = 0; i < numbers.length; i++) {
    powNumbers.push(numbers[i] * numbers[i]);
  }
  for (let i = 0; i < numbers.length; i++) {
    if (powNumbers[i] !== numbers2[i]) {
      return false;
    }
  }
  return true;
}
console.log(check(numbers, numbers2));
TODO ‚Äì Var 2
const numbers = [11, 9, 3, 121, 33, 24, 20];
const numbers2 = [121, 81, 9, 14641, 1089, 576, 400];
function check(numbers, numbers2) {
  if (numbers.length !== numbers2.length) {
    return false;
  }
  for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] !== Math.sqrt(numbers2[i])) {
      return false;
    }
  }
  return true;
}
console.log(check(numbers, numbers2));
*/

/* //! Task #22 function() for()
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ —Å—É–º—É–≤–∞—Ç–∏–º–µ —Å—É—Å—ñ–¥–Ω—ñ —á–∏—Å–ª–∞ —ñ –ø—É—à–∏—Ç–∏–º–µ —ó—Ö —É –Ω–æ–≤–∏–π –º–∞—Å–∏–≤.
TODO ‚Äì Var 1
const someArr = [22, 11, 34, 5, 12];
function sumNeighbors(array) {
  const sum = [];
  for (let i = 0; i < array.length - 1; i++) {
    sum.push(array[i] + array[i + 1]);
  }
  return sum;
}
console.log(sumNeighbors(someArr));
TODO ‚Äì Var 2
const someArr = [22, 11, 34, 5, 12];
function sumNeighbors(array) {
  const sum = [];
  for (let i = 0; i < array.length; i += 2) {
    sum.push(array[i] + (array[i + 1] || 0));
  }
  return sum;
}
console.log(sumNeighbors(someArr));
*/

/* //! Task #23 length() ? :
TODO: –í–∏–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –∞–±–æ null, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î.
const arr = [35, 9, -25, 0];
console.log(arr.length >= 2 ? arr[arr.length - 2] : null);
*/

/* //! Task #24 for() of() reduce()
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ, –ø–æ–≤–µ—Ä—Ç–∞—é—á–∏ 0 –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –º–∞—Å–∏–≤—É.
TODO ‚Äì Var 1
function sum(numbers) {
  let total = 0;
  for (let num of numbers) {
    total += num;
  }
  return total;
}
console.log(sum([1, 5.2, 4, 0, -1]));
console.log(sum([]));
TODO ‚Äì Var 2
function sum(numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}
console.log(sum([1, 5.2, 4, 0, -1]));
console.log(sum([]));
*/

/* //! Task #25 function() for() of() –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é add –¥–ª—è —Å–∫–ª–∞–¥–∞–Ω–Ω—è –¥–æ–≤—ñ–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (—á–∏—Å–µ–ª).
const add = function () {
  let total = 0;
  for (const arg of arguments) {
    total += arg;
  }
  return total;
};
console.log(add(1, 2, 3));
console.log(add(1, 2, 4, 5, 6));
*/

/* //! Task #26 function() for() of() –ü—Å–µ–≤–¥–æ–º–∞—Å–∏–≤
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é calculateAverage(), —è–∫–∞ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ –¥–æ–≤—ñ–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.
const calculateAverage = function () {
  let total = 0;
  for (const arg of arguments) {
    total += arg;
  }
  return total / arguments.length;
};
console.log(calculateAverage(1, 2, 3, 4));
console.log(calculateAverage(14, 8, 2));
console.log(calculateAverage(27, 43, 2, 8, 36));
*/

/* //! Task #27 function() split()
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é getRectArea(dimensions) –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑ —Ä—è–¥–∫–∞.
const getRectArea = function (dimensions) {
  const sidesArr = dimensions.split(' ');
  return Number(sidesArr[0]) * Number(sidesArr[1]);
};
console.log(getRectArea('8 11'));
console.log(getRectArea('18 11'));
console.log(getRectArea('8 21'));
*/

/* //! Task #28 function() for()
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é logItems(items), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É –∑ –Ω–æ–º–µ—Ä–∞–º–∏, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 1.
const logItems = function (items) {
  for (let i = 0; i < items.length; i++) {
    console.log(`${i + 1} - ${items[i]}`);
  }
};
logItems(['Mango', 'Poly', 'Ajax']);
logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
*/

/* //! Task #29 function() for() split()
TODO: –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—é printInfo(names, phones), —è–∫–∞ –≤–∏–≤–æ–¥–∏—Ç—å —ñ–º–µ–Ω–∞ —Ç–∞ –Ω–æ–º–µ—Ä–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤.
const printInfo = function (names, phones) {
  names = names.split(',');
  phones = phones.split(',');
  for (let i = 0; i < names.length; i++) {
    console.log(`${names[i]} - ${phones[i]}`);
  }
};
printInfo('Jacob,William,Solomon,Artemis', '89001234567,89001112233,890055566377,890055566300');
*/
// #endregion

// #region // –û–±'—î–∫—Ç–∏ (–ü—Ä–∞–∫—Ç–∏–∫–∞)
/* //! Task #1
TODO: –ü–æ—à—É–∫ –¥—Ä—É–≥–∞ –ø–æ —ñ–º–µ–Ω—ñ –≤ –º–∞—Å–∏–≤—ñ –æ–±‚Äô—î–∫—Ç—ñ–≤.
const friends = [
  { name: 'John', online: true },
  { name: 'Alice', online: false },
  { name: 'Bob', online: true },
  { name: 'Charlie', online: false },
];
const findFriendByName = function (allFriends, friendName) {
  for (const friend of allFriends) {
    if (friend.name.toLowerCase() === friendName.toLowerCase()) {
      return friend;
    }
  }
  return 'none';
};
console.log(findFriendByName(friends, 'John'));
*/

/* //! Task #2
TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º–µ–Ω–∞ –≤—Å—ñ—Ö –¥—Ä—É–∑—ñ–≤ —ñ–∑ –º–∞—Å–∏–≤—É –æ–±‚Äô—î–∫—Ç—ñ–≤.
const friends = [
  { name: 'John', online: true },
  { name: 'Alice', online: false },
  { name: 'Bob', online: true },
  { name: 'Charlie', online: false },
];
const getAllNames = function (allFriends) {
  const allNames = [];
  for (const friend of allFriends) {
    allNames.push(friend.name);
  }
  return allNames;
};
console.log(getAllNames(friends));
*/

/* //! Task #3
TODO: –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–º–µ–Ω–∞ –¥—Ä—É–∑—ñ–≤, —è–∫—ñ –æ–Ω–ª–∞–π–Ω.
const friends = [
  { name: 'John', online: true },
  { name: 'Alice', online: false },
  { name: 'Bob', online: true },
  { name: 'Charlie', online: false },
];
const getOnlineFriends = function (allFriends) {
  const friendsNames = [];
  for (const friend of allFriends) {
    if (friend.online) {
      friendsNames.push(friend.name);
    }
  }
  return friendsNames;
};
console.log(getOnlineFriends(friends));
*/

/* //! Task #4
TODO: –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É –≤—Å—ñ—Ö –∑–∞—Ä–ø–ª–∞—Ç —É –æ–±‚Äô—î–∫—Ç—ñ.
TODO ‚Äì Var 1 Object.entries()
const salaries = {
  Mango: 100,
  Poly: 160,
  Ajax: 222,
};
let sum = 0;
const array = Object.entries(salaries);
for (const arrayElement of array) {
  sum += arrayElement[1];
}
console.log(sum);
TODO ‚Äì Var 2 Object.keys()
const salaries = {
  Mango: 100,
  Poly: 160,
  Ajax: 222,
};
const keys = Object.keys(salaries);
let sum = 0;
for (let i = 0; i < keys.length; i++) {
  sum += salaries[keys[i]];
}
console.log(sum);
*/

/* //! Task #5
TODO: –°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ [key, value] —ñ–∑ –∑–∞–¥–∞–Ω–æ–≥–æ –æ–±‚Äô—î–∫—Ç–∞.
const user = {
  name: 'John',
  surName: 'Stones',
  age: 20,
  hobby: 'tenis',
  haveCar: true,
  merried: false,
};
const getArray = function (obj) {
  const newArray = [];
  const keys = Object.keys(obj);
  for (const key of keys) {
    newArray.push({ [key]: obj[key] });
  }
  return newArray;
};
console.log(getArray(user));
*/

/* //! Task #6
TODO: –û–±—á–∏—Å–ª–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∫–∞–º–µ–Ω—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é –≤ –º–∞—Å–∏–≤—ñ –æ–±‚Äô—î–∫—Ç—ñ–≤.
const stones = [
  { name: '–ê–∫–æ–Ω—ñ—Ç', price: 100, quantity: 10 },
 arthritis arthritis  { name: '–°–º–∞—Ä–∞–≥–¥', price: 1300, quantity: 4 },
  { name: '–î—ñ–∞–º–∞–Ω—Ç', price: 2700, quantity: 3 },
  { name: '–°–∞–ø—Ñ—ñ—Ä', price: 400, quantity: 7 },
  { name: '–©–µ–±—ñ–Ω—å', price: 200, quantity: 2 },
];
const calcTotalPrice = function (allStones, stoneName) {
  stoneName = stoneName.toLowerCase();
  for (const stone of allStones) {
    if (stone.name.toLowerCase() === stoneName) {
      return stone.price * stone.quantity;
    }
  }
};
console.log(calcTotalPrice(stones, '–î—ñ–∞–º–∞–Ω—Ç'));
*/

/* //! Task #7
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±‚Äô—î–∫—Ç —ñ–∑ –º–µ—Ç–æ–¥–æ–º –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞.
const rectangle = {
  width: 27,
  height: 23,
  calculateArea() {
    return this.width * this.height;
  }
};
console.log(rectangle.calculateArea());
*/

/* //! Task #8
TODO: –°—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±‚Äô—î–∫—Ç bankAccount —ñ–∑ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è —Ç–∞ –∑–Ω—è—Ç—Ç—è –≥—Ä–æ—à–µ–π.
const bankAccount = {
  ownerName: 'John Doe',
  accountNumber: '21',
  balance: 23098,
  deposit(sum) {
    this.balance += sum;
  },
  withdraw(sum) {
    this.balance -= sum;
  },
};
bankAccount.deposit(234);
console.log(bankAccount);
bankAccount.withdraw(234);
console.log(bankAccount);
*/

/* //! Task #9 Object.keys()
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–∞—î –æ–±‚Äô—î–∫—Ç –∑–∞–¥–∞–Ω–∏–π –∫–ª—é—á.
TODO ‚Äì Var 1
const obj = {
  name: 'Igor',
  car: 'Mercedes',
  carColor: 'black',
};
const checkObj = function (obj, key) {
  const keys = Object.keys(obj);
  for (const item of keys) {
    if (item === key) {
      return true;
    }
  }
  return false;
};
console.log(checkObj(obj, "car"));
TODO ‚Äì Var 2
const obj = {
  name: 'Igor',
  car: 'Mercedes',
  carColor: 'black',
};
const checkObj = function (obj, key) {
  return Object.keys(obj).includes(key);
};
console.log(checkObj(obj, "car"));
*/
// #endregion

// #region // –û–±'—î–∫—Ç–∏ (–¢–µ–æ—Ä—ñ—è)
/* //! dot notation
human.mood = "happy";
const human = {
  name: "Mango",
  hobby: "reading",
  age: 20,
  greet() {
    console.log(`Hello ${human.name}`);
  }
};
human.greet();
*/

/* //! brackets notation
human["mood"] = "happy";
const human = {
  name: "Mango",
  hobby: "reading",
  age: 20,
  greet() {
    console.log(`Hello ${human.name}`);
  }
};
human.greet();
*/

/* //! compound brackets notation
const userMood = "mood";
human[userMood] = "happy";
const human = {
  name: "Mango",
  hobby: "reading",
  age: 20,
  greet() {
    console.log(`Hello ${human.name}`);
  }
};
human.greet();
console.log(human);
*/

/* //! for...in
TODO: –ü–æ—Ä–∞—Ö—É–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤.
const feedbacks = {
  good: 5,
  neutral: 10,
  bad: 3,
};
let totalFeedbacks = 0;
for (const key in feedbacks) {
  totalFeedbacks += feedbacks[key];
}
console.log('totalFeedbacks:', totalFeedbacks);
*/

/* //! Object.keys()
TODO: –ü–æ—Ä–∞—Ö—É–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤.
const feedbacks = {
  good: 5,
  neutral: 10,
  bad: 3,
};
const feedbacksKeys = Object.keys(feedbacks);
let totalFeedbacks = 0;
for (const key of feedbacksKeys) {
  totalFeedbacks += feedbacks[key];
}
console.log('totalFeedbacks:', totalFeedbacks);
*/

/* //! Object.values()
TODO: –ü–æ—Ä–∞—Ö—É–π—Ç–µ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≥—É–∫—ñ–≤.
const feedbacks = {
  good: 5,
  neutral: 10,
  bad: 3,
};
const feedbacksValues = Object.values(feedbacks);
let totalFeedbacks = 0;
for (const value of feedbacksValues) {
  totalFeedbacks += value;
}
console.log(totalFeedbacks);
*/

// #endregion

// #region // Questions (–ü—Ä–∞–∫—Ç–∏–∫–∞)
/* //! Question #1
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Ä–µ—á–µ–Ω–Ω—è –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.
const str = '–Ø –Ω–µ—Å—É –≥—É—Å–µ–Ω—è';
TODO ‚Äì Var 1
function isPalindrom(string) {
  const newStr = string.replaceAll(' ', '').toLowerCase();
  let reversedString = '';
  for (let i = 0; i < newStr.length; i++) {
    reversedString += newStr[newStr.length - 1 - i];
  }
  return newStr === reversedString;
}
console.log(isPalindrom(str));
TODO ‚Äì Var 2
function isPalindrom(string) {
  const newStr = string.replaceAll(' ', '').toLowerCase();
  let reversedString = '';
  for (let i = newStr.length - 1; i >= 0; i--) {
    reversedString += newStr[i];
  }
  return newStr === reversedString;
}
console.log(isPalindrom(str));
TODO ‚Äì Var 3
function isPalindrom(string) {
  const newStr = string.replaceAll(' ', '').toLowerCase();
  for (let i = 0; i < Math.floor(newStr.length / 2); i++) {
    if (newStr[i] !== newStr[newStr.length - 1 - i]) {
      return false;
    }
  }
  return true;
}
console.log(isPalindrom(str));
*/

/* //! Question #2
TODO: –í–∏–≤–µ—Å—Ç–∏ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ —ñ–∑ –∑—ñ—Ä–æ—á–æ–∫ –≤—ñ–¥ 1 –¥–æ 7.
TODO ‚Äì Var 1
let str = '*';
while (str.length < 8) {
  console.log(str);
  str += '*';
}
TODO ‚Äì Var 2
let str = '*';
do {
  console.log(str);
  str += '*';
} while (str.length < 8);
TODO ‚Äì Var 3
let str = '*';
for (let i = 0; i < 7; i++) {
  console.log(str);
  str += '*';
}
*/

/* //! Question #3
TODO: –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å—É–º—É —á–∏—Å–µ–ª –≤—ñ–¥ 12 –¥–æ 27.
const num1 = 12;
const num2 = 27;
let sum = 0;
for (let i = num1; i <= num2; i++) {
  sum += i;
}
console.log(sum);
*/

/* //! Question #4
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∑–∞–∫–æ—Ö–∞–Ω—ñ –¢—ñ–º–º—ñ —Ç–∞ –°–∞—Ä–∞ (–ø–∞—Ä–Ω–∞ + –Ω–µ–ø–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ–ª—é—Å—Ç–æ–∫).
TODO ‚Äì Var 1
function checkLove(flower1, flower2) {
  return flower1 % 2 !== flower2 % 2;
}
console.log(checkLove(2, 3));
TODO ‚Äì Var 2
function checkLove(flower1, flower2) {
  if ((flower1 % 2 === 0 && flower2 % 2 !== 0) || (flower1 % 2 !== 0 && flower2 % 2 === 0)) {
    return true;
  }
  return false;
}
console.log(checkLove(3, 3));
*/

/* //! Question #5
TODO: –ó–∞–ø–∏—Ç–∞—Ç–∏ –Ω–∞–ø—ñ–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–≤–µ—Å—Ç–∏ —Ü—ñ–Ω—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é switch.
let drink = prompt('–©–æ –±–∞–∂–∞—î—Ç–µ?')?.toLowerCase();
let price = 0;
switch (drink) {
  case '–∫–∞–≤–∞':
    price = 1;
    break;
  case '—á–∞–π':
    price = 2;
    break;
  case '—Å—ñ–∫':
    price = 3;
    break;
  default:
    console.log('–©–æ —Ü–µ?');
}
console.log(price);
*/

/* //! Question #6
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥—Ä—è–¥–∫–∞ –≤ —Ä—è–¥–∫—É —Ç–∞ –∑–Ω–∞–π—Ç–∏ –π–æ–≥–æ –ø–æ–∑–∏—Ü—ñ—é.
const languages = 'HTML, CSS, JS, PHP, React, Vue, Node.js, C, C++';
function findSubString(string, subString) {
  if (string.includes(subString)) {
    return string.indexOf(subString);
  }
  return 'Not found';
}
console.log(findSubString(languages, 'JS'));
*/

/* //! Question #7
TODO: –î—ñ–∑–Ω–∞—Ç–∏—Å—è, –Ω–∞ —â–æ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —Ä—è–¥–æ–∫ (%, rem, em, px).
const str = '24px';
const result = str.slice(-2);
console.log(result);
*/

/* //! Question #8
TODO: –ó–∞–º—ñ–Ω–∏—Ç–∏ –≤—Å—ñ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è 'dog' –Ω–∞ 'monkey' —É —Ä—è–¥–∫—É.
const str = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?';
console.log(str.replaceAll('dog', 'monkey'));
*/

/* //! Question #9 –õ–æ–≥—ñ—á–Ω—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏
console.log(true && 3);
console.log(false && 3);
console.log(true && 4 && "kiwi");
console.log((true && 0) || "kiwi");
console.log(true || 3);
console.log(true || 3 || 4);
console.log(true || false || 7);
console.log(null || 2 || undefined);
console.log((1 && null && 2) >= 0);
console.log(null || (2 && 3) || 4);
*/

/* //! Question #10 –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—ñ–≤
console.log(2 + 5 + '' + 1 + 0);
console.log('' + 1 - 0);
console.log(true + false);
console.log(6 / Number.parseInt('3px'));
console.log('2' * '3');
console.log(4 + 5 + 'px');
console.log('$' + 4 + 5);
console.log('4' - 2);
console.log('4px' - 2);
console.log(7 / 0);
console.log('  -9  ' + 5);
console.log(null + 1);
console.log(undefined + 1);
console.log('' + 1);
console.log(3 > 2 > 1);
console.log(3 > 2 && 2 > 1);
*/

/* //! Question #11
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —á–∏—Å–ª–æ –ø–æ–∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º 10-20.
let num = 25;
console.log(num < 10 || num > 20);
*/
// #endregion

// #region // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–∞–¥–∞—á—ñ (–±–µ–∑ –Ω–æ–º–µ—Ä—ñ–≤)
/* //! –í–∏—Å–æ–∫–æ—Å–Ω—ñ —Ä–æ–∫–∏
TODO: –í–∏–≤–µ—Å—Ç–∏ –≤–∏—Å–æ–∫–æ—Å–Ω—ñ —Ä–æ–∫–∏ –≤—ñ–¥ 1700 –¥–æ 2025.
for (let i = 1700; i <= 2025; i++) {
  if (i % 400 === 0 || (i % 100 !== 0 && i % 4 === 0)) {
    console.log('–≤–∏—Å–æ–∫–æ—Å–Ω–∏–π', i);
  }
}
*/

/* //! –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–Ω—É —Ç–∞ –ø–∞—Ä–æ–ª—è
TODO: –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ prompt.
const userLogin = prompt('Enter login!');
if (userLogin === '–ê–¥–º—ñ–Ω') {
  const userPassword = prompt('Enter your password');
  if (userPassword === '–Ø –≥–æ–ª–æ–≤–Ω–∏–π') {
    console.log('–ó–¥—Ä–∞—Å—Ç—É–π—Ç–µ!');
  } else if (userPassword === null || userPassword === '') {
    console.log('–°–∫–∞—Å–æ–≤–∞–Ω–æ');
  } else {
    console.log('–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å!');
  }
} else if (userLogin === null || userLogin === '') {
  console.log('–°–∫–∞—Å–æ–≤–∞–Ω–æ');
} else {
  console.log('–Ø –≤–∞—Å –Ω–µ –∑–Ω–∞—é');
}
*/

/* //! –ö–≤–∞–¥—Ä–∞—Ç —ñ–∑ –ø–ª—é—Å—ñ–≤
function generateSquare(number) {
  let str = '';
  const repeatString = '+'.repeat(number);
  for (let i = 0; i < number; i++) {
    str += repeatString;
    if (i !== number - 1) str += '\n';
  }
  console.log(str);
}
generateSquare(3);
*/
